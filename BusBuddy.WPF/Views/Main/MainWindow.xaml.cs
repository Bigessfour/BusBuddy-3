/*
================================================================================
 BusBuddy Syncfusion Designer & Event Hook Troubleshooting
================================================================================
1. Ensure all Syncfusion controls in MainWindow.xaml have x:Name attributes:
   <syncfusion:SfDataGrid x:Name="StudentsGrid" ... />
   <syncfusion:SfDataGrid x:Name="RoutesGrid" ... />
   <syncfusion:SfDataGrid x:Name="BusesGrid" ... />
   <syncfusion:SfDataGrid x:Name="DriversGrid" ... />

2. The code-behind (MainWindow.xaml.cs) must be a partial class for MainWindow
   and reside in the same namespace as the XAML.

3. If you see errors like 'The name StudentsGrid does not exist in the current context':
   - Clean and rebuild the solution (bb-clean, bb-build).
   - Open MainWindow.xaml in Visual Studio/VS Code and save to trigger designer regeneration.
   - Ensure Syncfusion.SfGrid.WPF NuGet package is installed and referenced.

4. Event hooks for QueryCellInfo must be attached after InitializeComponent():
   if (StudentsGrid != null) StudentsGrid.QueryCellInfo += SfDataGrid_QueryCellInfo;
   (Repeat for other grids.)

5. If GridQueryCellInfoEventArgs is missing, add:
   using Syncfusion.UI.Xaml.Grid;

6. For runtime diagnostics, the event handler should log errors:
   private void SfDataGrid_QueryCellInfo(object sender, GridQueryCellInfoEventArgs e) { ... }

7. If designer/build issues persist, check .g.cs auto-generated files in obj/Debug.
================================================================================
*/
using System;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using Syncfusion.UI.Xaml.Grid;
using BusBuddy.WPF.ViewModels;
using BusBuddy.WPF.Views.Dashboard;
using BusBuddy.WPF.Views.Student;
using BusBuddy.WPF.Views.Bus;
using BusBuddy.WPF.Views.Driver;
using BusBuddy.WPF.Views.Analytics;
using BusBuddy.WPF.Views.Route;
using BusBuddy.WPF.Views.Settings;
using Syncfusion.SfSkinManager;
using Serilog;

namespace BusBuddy.WPF.Views.Main
{
    /// <summary>
    /// BusBuddy MainWindow - MVP Implementation with Syncfusion DockingManager
    /// Professional layout with validated Syncfusion patterns
    /// </summary>
    public partial class MainWindow : Window
        // Ensure named controls are available as fields (auto-generated by XAML)
        // StudentsGrid, RoutesGrid, BusesGrid, DriversGrid
    {
        private static readonly ILogger Logger = Log.ForContext<MainWindow>();

        public MainWindow()
        {
            Logger.Debug("MainWindow constructor starting");
            try
            {
                Logger.Debug("Calling InitializeComponent for MainWindow XAML");
                InitializeComponent();

                Logger.Debug("Applying Syncfusion theme");
                ApplySyncfusionTheme();

                Logger.Debug("Initializing MainWindow components");
                InitializeMainWindow();

                // Attach Syncfusion SfDataGrid error hooks for runtime diagnostics
                Logger.Debug("Attaching Syncfusion event hooks");
                AttachSyncfusionEventHooks();

                Logger.Information("MainWindow initialized successfully with Syncfusion DockingManager");
                Logger.Debug("MainWindow constructor completed successfully");
            }
            catch (Exception ex)
            {
                Logger.Error(ex, "Failed to initialize MainWindow");
                Logger.Debug("Creating fallback layout due to initialization failure");
                // Fallback to simple layout if XAML fails
                CreateFallbackLayout();
            }
        }

        /// <summary>
        /// Attach event hooks to Syncfusion controls for runtime error capture
        /// </summary>
        private void AttachSyncfusionEventHooks()
        {
            try
            {
                // ===================================================================
                // SYNCFUSION EVENT HOOK IMPLEMENTATION GUIDE
                // ===================================================================
                //
                // These event hooks will work once the corresponding XAML controls
                // are properly defined with x:Name attributes in MainWindow.xaml:
                //
                // <syncfusion:SfDataGrid x:Name="StudentsGrid" ItemsSource="{Binding Students}" ... />
                // <syncfusion:SfDataGrid x:Name="RoutesGrid" ItemsSource="{Binding Routes}" ... />
                // <syncfusion:SfDataGrid x:Name="BusesGrid" ItemsSource="{Binding Vehicles}" ... />
                // <syncfusion:SfDataGrid x:Name="DriversGrid" ItemsSource="{Binding Drivers}" ... />
                //
                // Required using statement at top of file:
                // using Syncfusion.UI.Xaml.Grid;
                //
                // Once XAML is properly set up, uncomment these lines:
                //
                // if (StudentsGrid != null)
                // {
                //     StudentsGrid.QueryCellInfo += SfDataGrid_QueryCellInfo;
                // }
                // if (RoutesGrid != null)
                // {
                //     RoutesGrid.QueryCellInfo += SfDataGrid_QueryCellInfo;
                // }
                // if (BusesGrid != null)
                // {
                //     BusesGrid.QueryCellInfo += SfDataGrid_QueryCellInfo;
                // }
                // if (DriversGrid != null)
                // {
                //     DriversGrid.QueryCellInfo += SfDataGrid_QueryCellInfo;
                // }
                //
                // ===================================================================

                Logger.Information("Syncfusion event hooks prepared (awaiting XAML control definitions)");
            }
            catch (Exception ex)
            {
                Logger.Warning(ex, "Failed to attach Syncfusion event hooks - this is expected if controls aren't defined in XAML yet");
            }
        }

        /// <summary>
        /// Syncfusion SfDataGrid cell error handler for runtime diagnostics
        /// This method is ready for use once XAML controls are properly defined
        /// </summary>
        private void SfDataGrid_QueryCellInfo(object sender, object e)
        {
            try
            {
                // Generic event handler that will work with any Syncfusion grid event
                // Once proper using Syncfusion.UI.Xaml.Grid; is added, change parameter to:
                // private void SfDataGrid_QueryCellInfo(object sender, GridQueryCellInfoEventArgs e)

                // Cell processing logic would go here
                // For now, this is just an error capture wrapper
            }
            catch (Exception ex)
            {
                Logger.Error(ex, "SfDataGrid cell error in {GridName}", (sender as FrameworkElement)?.Name ?? "UnknownGrid");

                // Enhanced error logging for UI interactions
                var errorEntry = $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] SfDataGrid Error: {ex.Message}\n" +
                               $"Grid: {(sender as FrameworkElement)?.Name ?? "Unknown"}\n" +
                               $"Stack Trace: {ex.StackTrace}\n" +
                               $"---\n";
                System.IO.File.AppendAllText("runtime-errors.log", errorEntry);
            }
        }

        private void ApplySyncfusionTheme()
        {
            Logger.Debug("ApplySyncfusionTheme method started");
            try
            {
                Logger.Debug("Configuring Syncfusion SfSkinManager global settings");
                // Apply FluentDark theme with FluentLight fallback
                // Based on SYNCFUSION_API_REFERENCE.md validated patterns
                SfSkinManager.ApplyStylesOnApplication = true;
                SfSkinManager.ApplyThemeAsDefaultStyle = true;

                Logger.Debug("Creating FluentDark theme instance");
                using var fluentDarkTheme = new Theme("FluentDark");
                Logger.Debug("Applying FluentDark theme to MainWindow");
                SfSkinManager.SetTheme(this, fluentDarkTheme);

                Logger.Information("Applied FluentDark theme successfully");
                Logger.Debug("ApplySyncfusionTheme completed with FluentDark");
            }
            catch (Exception ex)
            {
                Logger.Warning(ex, "Failed to apply FluentDark theme, trying FluentLight fallback");

                try
                {
                    Logger.Debug("Attempting FluentLight fallback theme");
                    using var fluentLightTheme = new Theme("FluentLight");
                    SfSkinManager.SetTheme(this, fluentLightTheme);
                    Logger.Information("Applied FluentLight fallback theme successfully");
                    Logger.Debug("ApplySyncfusionTheme completed with FluentLight fallback");
                }
                catch (Exception fallbackEx)
                {
                    Logger.Error(fallbackEx, "Failed to apply any Syncfusion theme");
                    Logger.Debug("ApplySyncfusionTheme failed completely, continuing without theme");
                }
            }
        }

        private void InitializeMainWindow()
        {
            Logger.Debug("InitializeMainWindow method started");
            // Initialize data contexts for each panel
            // This will be connected to proper ViewModels in the next phase

            Logger.Debug("Creating MainWindowViewModel instance");
            // For now, set basic data context to prevent binding errors
            this.DataContext = new MainWindowViewModel();

            Logger.Information("MainWindow data context initialized");
            Logger.Debug("InitializeMainWindow method completed");
        }

        private void CreateFallbackLayout()
        {
            Logger.Debug("CreateFallbackLayout method started");
            Logger.Information("Creating fallback layout due to XAML initialization failure");

            // Simplified layout if XAML fails
            this.Width = 1200;
            this.Height = 800;
            this.Title = "BusBuddy - Transportation Management";

            var welcomeText = new TextBlock
            {
                Text = "BusBuddy MVP - Syncfusion Layout Loading...\n\nIf this message persists, check Syncfusion assembly references.",
                FontSize = 18,
                TextAlignment = TextAlignment.Center,
                VerticalAlignment = VerticalAlignment.Center,
                HorizontalAlignment = HorizontalAlignment.Center,
                Margin = new Thickness(20)
            };

            this.Content = welcomeText;
        }

        // Event handlers for buttons (if any exist in XAML)
        private void DashboardButton_Click(object sender, RoutedEventArgs e)
        {
            Logger.Debug("DashboardButton_Click event triggered");
            Logger.Information("Dashboard navigation requested");
            // Future: Navigate to dashboard view
            Logger.Debug("Dashboard navigation logic completed");
        }

        private void StudentsButton_Click(object sender, RoutedEventArgs e)
        {
            Logger.Debug("StudentsButton_Click event triggered");
            Logger.Information("Students navigation requested");
            try
            {
                // Create a window to host the StudentsView
                var studentsWindow = new Window
                {
                    Title = "📚 Students Management",
                    Width = 1000,
                    Height = 700,
                    WindowStartupLocation = WindowStartupLocation.CenterOwner,
                    Owner = this,
                    Content = new StudentsView()
                };

                Logger.Debug("Showing StudentsView in modal dialog");
                studentsWindow.ShowDialog();
                Logger.Information("StudentsView dialog closed");
                RefreshStudentsGrid();
            }
            catch (Exception ex)
            {
                Logger.Error(ex, "Error opening Students view");
                MessageBox.Show($"Error opening Students view: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void RouteManagementButton_Click(object sender, RoutedEventArgs e)
        {
            Logger.Debug("RouteManagementButton_Click event triggered");
            Logger.Information("Route management navigation requested");
            // Future: Navigate to route management view
            Logger.Debug("Route management navigation logic completed");
        }

        private void AnalyticsButton_Click(object sender, RoutedEventArgs e)
        {
            Logger.Debug("AnalyticsButton_Click event triggered");
            Logger.Information("Analytics navigation requested");
            // Future: Navigate to analytics view
            Logger.Debug("Analytics navigation logic completed");
        }

        private void DriversButton_Click(object sender, RoutedEventArgs e)
        {
            Logger.Debug("DriversButton_Click event triggered");
            Logger.Information("Drivers navigation requested");
            // Future: Navigate to drivers view
            Logger.Debug("Drivers navigation logic completed");
        }

        private void VehiclesButton_Click(object sender, RoutedEventArgs e)
        {
            Logger.Debug("VehiclesButton_Click event triggered");
            Logger.Information("Vehicles navigation requested");
            // Future: Navigate to vehicles view
            Logger.Debug("Vehicles navigation logic completed");
        }

        private void ActivitiesButton_Click(object sender, RoutedEventArgs e)
        {
            Logger.Debug("ActivitiesButton_Click event triggered");
            Logger.Information("Activities navigation requested");
            // Future: Navigate to activities view
            Logger.Debug("Activities navigation logic completed");
        }

        private void FuelManagementButton_Click(object sender, RoutedEventArgs e)
        {
            Logger.Debug("FuelManagementButton_Click event triggered");
            Logger.Information("Fuel management navigation requested");
            // Future: Navigate to fuel management view
            Logger.Debug("Fuel management navigation logic completed");
        }

        private void SettingsButton_Click(object sender, RoutedEventArgs e)
        {
            Logger.Debug("SettingsButton_Click event triggered");
            Logger.Information("Settings navigation requested");
            // Future: Navigate to settings view
            Logger.Debug("Settings navigation logic completed");
        }

        // MVP Button Click Handlers
        private void AddStudent_Click(object sender, RoutedEventArgs e)
        {
            Logger.Debug("AddStudent_Click event triggered");
            try
            {
                Logger.Debug("Creating new StudentForm dialog");
                var studentForm = new StudentForm();
                Logger.Debug("Showing StudentForm modal dialog");
                var result = studentForm.ShowDialog();
                Logger.Debug("StudentForm dialog result: {DialogResult}", result);
                if (result == true)
                {
                    Logger.Information("Student added successfully");
                    Logger.Debug("Student form completed successfully, refreshing data");
                    RefreshStudentsGrid();
                }
                else
                {
                    Logger.Debug("Student form was cancelled or closed without saving");
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ex, "Error opening Student form");
                MessageBox.Show($"Error opening Student form: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void EditStudent_Click(object sender, RoutedEventArgs e)
        {
            Logger.Information("Edit student requested");
            MessageBox.Show("Edit Student functionality will be implemented in next phase", "Coming Soon", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        private void AddBus_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                var busForm = new BusForm();
                var result = busForm.ShowDialog();
                if (result == true)
                {
                    Logger.Information("Bus added successfully");
                    // TODO: Refresh bus grid
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ex, "Error opening Bus form");
                MessageBox.Show($"Error opening Bus form: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void AddDriver_Click(object sender, RoutedEventArgs e)
        {
            Logger.Debug("AddDriver_Click event triggered");
            try
            {
                Logger.Debug("Creating new DriverForm dialog");
                var driverForm = new DriverForm();
                Logger.Debug("Showing DriverForm modal dialog");
                var result = driverForm.ShowDialog();
                Logger.Debug("DriverForm dialog result: {DialogResult}", result);
                if (result == true)
                {
                    Logger.Information("Driver added successfully");
                    Logger.Debug("Driver form completed successfully, refreshing data");
                    RefreshDriversGrid();
                }
                else
                {
                    Logger.Debug("Driver form was cancelled or closed without saving");
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ex, "Error opening Driver form");
                MessageBox.Show($"Error opening Driver form: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        // Data refresh methods
        private void RefreshStudentsGrid()
        {
            Logger.Debug("RefreshStudentsGrid method started");
            try
            {
                if (StudentsGrid != null)
                {
                    Logger.Debug("Refreshing students data grid");
                    // TODO: Implement actual data refresh from service
                    StudentsGrid.View?.Refresh();
                    Logger.Information("Students grid refreshed successfully");
                }
                else
                {
                    Logger.Warning("StudentsGrid is null, cannot refresh");
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ex, "Error refreshing students grid");
            }
        }

        private void RefreshRoutesGrid()
        {
            Logger.Debug("RefreshRoutesGrid method started");
            try
            {
                if (RoutesGrid != null)
                {
                    Logger.Debug("Refreshing routes data grid");
                    // TODO: Implement actual data refresh from service
                    RoutesGrid.View?.Refresh();
                    Logger.Information("Routes grid refreshed successfully");
                }
                else
                {
                    Logger.Warning("RoutesGrid is null, cannot refresh");
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ex, "Error refreshing routes grid");
            }
        }

        private void RefreshBusesGrid()
        {
            Logger.Debug("RefreshBusesGrid method started");
            try
            {
                if (BusesGrid != null)
                {
                    Logger.Debug("Refreshing buses data grid");
                    // TODO: Implement actual data refresh from service
                    BusesGrid.View?.Refresh();
                    Logger.Information("Buses grid refreshed successfully");
                }
                else
                {
                    Logger.Warning("BusesGrid is null, cannot refresh");
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ex, "Error refreshing buses grid");
            }
        }

        private void RefreshDriversGrid()
        {
            Logger.Debug("RefreshDriversGrid method started");
            try
            {
                if (DriversGrid != null)
                {
                    Logger.Debug("Refreshing drivers data grid");
                    // TODO: Implement actual data refresh from service
                    DriversGrid.View?.Refresh();
                    Logger.Information("Drivers grid refreshed successfully");
                }
                else
                {
                    Logger.Warning("DriversGrid is null, cannot refresh");
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ex, "Error refreshing drivers grid");
            }
        }

        // Navigation methods
        private void NavigateToView(UserControl view, string viewName)
        {
            Logger.Debug("NavigateToView method started for {ViewName}", viewName);
            try
            {
                if (MainDockingManager != null)
                {
                    Logger.Debug("Setting active document for {ViewName}", viewName);
                    // TODO: Implement proper navigation with DockingManager
                    Logger.Information("Navigation to {ViewName} completed", viewName);
                }
                else
                {
                    Logger.Warning("MainDockingManager is null, cannot navigate");
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ex, "Error navigating to {ViewName}", viewName);
            }
        }

        // Data loading methods
        private async void LoadInitialData()
        {
            Logger.Debug("LoadInitialData method started");
            try
            {
                Logger.Information("Loading initial dashboard data");
                await LoadStudentsDataAsync();
                await LoadRoutesDataAsync();
                await LoadBusesDataAsync();
                await LoadDriversDataAsync();
                Logger.Information("Initial data loading completed successfully");
            }
            catch (Exception ex)
            {
                Logger.Error(ex, "Error loading initial data");
            }
        }

        private async Task LoadStudentsDataAsync()
        {
            Logger.Debug("LoadStudentsDataAsync method started");
            try
            {
                // TODO: Implement actual data loading from service
                Logger.Debug("Simulating students data load");
                await Task.Delay(100); // Simulate async operation
                Logger.Information("Students data loaded successfully");
            }
            catch (Exception ex)
            {
                Logger.Error(ex, "Error loading students data");
            }
        }

        private async Task LoadRoutesDataAsync()
        {
            Logger.Debug("LoadRoutesDataAsync method started");
            try
            {
                // TODO: Implement actual data loading from service
                Logger.Debug("Simulating routes data load");
                await Task.Delay(100); // Simulate async operation
                Logger.Information("Routes data loaded successfully");
            }
            catch (Exception ex)
            {
                Logger.Error(ex, "Error loading routes data");
            }
        }

        private async Task LoadBusesDataAsync()
        {
            Logger.Debug("LoadBusesDataAsync method started");
            try
            {
                // TODO: Implement actual data loading from service
                Logger.Debug("Simulating buses data load");
                await Task.Delay(100); // Simulate async operation
                Logger.Information("Buses data loaded successfully");
            }
            catch (Exception ex)
            {
                Logger.Error(ex, "Error loading buses data");
            }
        }

        private async Task LoadDriversDataAsync()
        {
            Logger.Debug("LoadDriversDataAsync method started");
            try
            {
                // TODO: Implement actual data loading from service
                Logger.Debug("Simulating drivers data load");
                await Task.Delay(100); // Simulate async operation
                Logger.Information("Drivers data loaded successfully");
            }
            catch (Exception ex)
            {
                Logger.Error(ex, "Error loading drivers data");
            }
        }

        // Window lifecycle methods
        private void MainWindow_Loaded(object sender, RoutedEventArgs e)
        {
            Logger.Debug("MainWindow_Loaded event triggered");
            try
            {
                Logger.Information("MainWindow loaded, starting initial data load");
                LoadInitialData();
                Logger.Debug("MainWindow_Loaded completed");
            }
            catch (Exception ex)
            {
                Logger.Error(ex, "Error in MainWindow_Loaded");
            }
        }

        private void MainWindow_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            Logger.Debug("MainWindow_Closing event triggered");
            try
            {
                Logger.Information("MainWindow closing, performing cleanup");
                // TODO: Implement cleanup logic
                Logger.Debug("MainWindow cleanup completed");
            }
            catch (Exception ex)
            {
                Logger.Error(ex, "Error during MainWindow closing");
            }
        }

        // Utility methods
        private void ShowErrorMessage(string message, string title = "Error")
        {
            Logger.Debug("ShowErrorMessage called with: {Message}", message);
            MessageBox.Show(message, title, MessageBoxButton.OK, MessageBoxImage.Error);
        }

        private void ShowSuccessMessage(string message, string title = "Success")
        {
            Logger.Debug("ShowSuccessMessage called with: {Message}", message);
            MessageBox.Show(message, title, MessageBoxButton.OK, MessageBoxImage.Information);
        }

        private void ShowWarningMessage(string message, string title = "Warning")
        {
            Logger.Debug("ShowWarningMessage called with: {Message}", message);
            MessageBox.Show(message, title, MessageBoxButton.OK, MessageBoxImage.Warning);
        }

        private void UpdateNavigationSelection(Button selectedButton)
        {
            // Future: Update visual selection state
            Logger.Debug("Navigation selection updated");
        }
    }

    /// <summary>
    /// Temporary ViewModel for MainWindow to prevent binding errors
    /// Will be replaced with proper ViewModel implementation
    /// </summary>
    public class MainWindowViewModel
    {
        public string Title { get; set; } = "BusBuddy MVP - Transportation Management";
        public string StatusMessage { get; set; } = "MVP Ready: Students ✅ | Routes ✅ | Buses ✅ | Drivers ✅";
    }
}
