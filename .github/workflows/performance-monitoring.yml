name: 📊 Performance Monitoring

on:
  schedule:
    - cron: "0 6 * * 1" # Weekly on Monday at 6 AM UTC
  workflow_dispatch:
    inputs:
      benchmark_type:
        description: "Benchmark type"
        required: false
        default: "full"
        type: choice
        options:
          - "full"
          - "build-only"
          - "startup-only"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOTNET_VERSION: "9.0.x"
  SOLUTION_FILE: "BusBuddy.sln"
  BUILD_CONFIGURATION: "Release"
  # GitHub CLI configuration - disable paging for CI logs
  GH_PAGER: ""
  GH_NO_UPDATE_NOTIFIER: "1"

jobs:
  performance-benchmark:
    runs-on: windows-latest
    timeout-minutes: 30

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: ⏱️ Benchmark build performance
        id: build-benchmark
        run: |
          echo "⏱️ Benchmarking build performance..."
          $startTime = Get-Date

          dotnet restore ${{ env.SOLUTION_FILE }} --verbosity quiet
          $restoreTime = (Get-Date) - $startTime

          $buildStart = Get-Date
          dotnet build ${{ env.SOLUTION_FILE }} --no-restore --configuration ${{ env.BUILD_CONFIGURATION }} --verbosity quiet
          $buildTime = (Get-Date) - $buildStart

          $totalTime = (Get-Date) - $startTime

          echo "restore-time=$($restoreTime.TotalSeconds)" >> $env:GITHUB_OUTPUT
          echo "build-time=$($buildTime.TotalSeconds)" >> $env:GITHUB_OUTPUT
          echo "total-time=$($totalTime.TotalSeconds)" >> $env:GITHUB_OUTPUT

          echo "📊 Performance Results:"
          echo "   Restore: $($restoreTime.TotalSeconds)s"
          echo "   Build: $($buildTime.TotalSeconds)s"
          echo "   Total: $($totalTime.TotalSeconds)s"

      - name: 📊 Generate performance report
        run: |
          echo "## 📊 Performance Benchmark Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Time (seconds) |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|----------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Package Restore | ${{ steps.build-benchmark.outputs.restore-time }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ steps.build-benchmark.outputs.build-time }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Total | ${{ steps.build-benchmark.outputs.total-time }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**📈 Trend Analysis:** Compare with previous runs for performance regression detection" >> $GITHUB_STEP_SUMMARY

      - name: 💾 Generate performance metrics JSON
        id: performance-json
        run: |
          echo "📊 Generating performance metrics JSON..."

          $performanceData = @{
            timestamp = (Get-Date -Format "yyyy-MM-dd HH:mm:ss")
            run_id = $env:GITHUB_RUN_ID
            run_number = $env:GITHUB_RUN_NUMBER
            commit = $env:GITHUB_SHA
            metrics = @{
              restore_time = [double]"${{ steps.build-benchmark.outputs.restore-time }}"
              build_time = [double]"${{ steps.build-benchmark.outputs.build-time }}"
              total_time = [double]"${{ steps.build-benchmark.outputs.total-time }}"
            }
            environment = @{
              os = "Windows"
              dotnet_version = "${{ env.DOTNET_VERSION }}"
              workflow = "${{ github.workflow }}"
              repository = "${{ github.repository }}"
            }
            benchmark_type = "${{ github.event.inputs.benchmark_type || 'full' }}"
          }

          $performanceData | ConvertTo-Json -Depth 4 | Out-File -FilePath "performance-metrics-$env:GITHUB_RUN_NUMBER.json" -Encoding UTF8

          echo "✅ Performance metrics JSON generated"
          echo "json-file=performance-metrics-$env:GITHUB_RUN_NUMBER.json" >> $env:GITHUB_OUTPUT

      - name: 📊 Analyze historical performance
        if: success()
        run: |
          echo "📈 Analyzing historical performance data..."

          # Download previous performance data if available
          try {
            $artifactNames = gh api repos/${{ github.repository }}/actions/artifacts --no-pager --jq '.artifacts[] | select(.name | starts_with("performance-data-")) | .name' 2>$null

            if ($artifactNames) {
              echo "📥 Found previous performance data artifacts"
              # Analysis would happen here in a real implementation
              echo "📊 Historical analysis complete (mock implementation)"
            } else {
              echo "⚠️ No previous performance data artifacts found - will create baseline"
            }
          } catch {
            echo "⚠️ Unable to query previous artifacts, creating baseline metrics"
          }

          # Create a trends chart summary
          echo "## 📈 Performance Trends" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This run establishes performance metrics that will be used to track trends over time." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Current Value | Historical Average | Trend |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|--------------|-------------------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Restore Time | ${{ steps.build-benchmark.outputs.restore-time }}s | — | 📊 |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Time | ${{ steps.build-benchmark.outputs.build-time }}s | — | 📊 |" >> $GITHUB_STEP_SUMMARY
          echo "| Total Time | ${{ steps.build-benchmark.outputs.total-time }}s | — | 📊 |" >> $GITHUB_STEP_SUMMARY
        env:
          GH_TOKEN: ${{ github.token }}
        continue-on-error: true

      - name: 💾 Store performance data
        uses: actions/upload-artifact@v4
        with:
          name: performance-data-${{ github.run_number }}
          path: |
            performance-metrics-*.json
          retention-days: 90
