# Reference: https://docs.github.com/actions/using-workflows/workflow-syntax-for-github-actions
name: 🚌 BusBuddy CI

env:
  DOTNET_VERSION: 9.0.303
  BUILD_CONFIGURATION: Release
  SOLUTION_FILE: BusBuddy.sln

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-test:
    name: 🏗️ Build & Test
    runs-on: windows-latest
    timeout-minutes: 15
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚙️ Set CI defaults
        shell: pwsh
        run: |
          if (-not $env:SOLUTION_FILE) {
            $sln = Get-ChildItem -Path . -Filter *.sln -Recurse | Select-Object -First 1
            if ($sln) { "SOLUTION_FILE=$($sln.FullName)" >> $env:GITHUB_ENV }
          }

      - name: 🏗️ Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 🔐 Export secrets to env
        shell: pwsh
        run: |
          $secrets = @{
            SYNCFUSION_LICENSE_KEY = '${{ secrets.SYNCFUSION_LICENSE_KEY }}'
            BUSBUDDY_CONNECTION    = '${{ secrets.BUSBUDDY_CONNECTION }}'
            AZURE_SQL_SERVER       = '${{ secrets.AZURE_SQL_SERVER }}'
            AZURE_SQL_USER         = '${{ secrets.AZURE_SQL_USER }}'
            AZURE_SQL_PASSWORD     = '${{ secrets.AZURE_SQL_PASSWORD }}'
          }
          foreach ($k in $secrets.Keys) {
            $v = $secrets[$k]
            if ($null -ne $v -and $v -ne '') {
              Write-Output "::add-mask::$v"
              Add-Content -Path $env:GITHUB_ENV -Value "$k=$v"
            }
          }

      - name: Configure Syncfusion license
        run: |
          if (-not $env:SYNCFUSION_LICENSE_KEY) {
            echo "::notice::SYNCFUSION_LICENSE_KEY not set; build may show license warnings."
          } else {
            Write-Information "Syncfusion license key present." -InformationAction Continue
          }

      - name: 🔧 Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_FILE }} --verbosity minimal

      - name: 🏗️ Build solution
        run: dotnet build ${{ env.SOLUTION_FILE }} --no-restore --configuration ${{ env.BUILD_CONFIGURATION }} --verbosity minimal

      - name: 🧪 Run tests
        run: dotnet test ${{ env.SOLUTION_FILE }} --no-build --configuration ${{ env.BUILD_CONFIGURATION }} --verbosity normal --logger "trx;LogFileName=Tests.trx"

      - name: 📊 Publish test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ github.run_number }}
          path: "**/Tests.trx"
          retention-days: 7

      - name: 🛠️ Ensure sqlcmd is available
        id: ensure-sqlcmd
        if: ${{ env.BUSBUDDY_CONNECTION != '' && env.AZURE_SQL_SERVER != '' && env.AZURE_SQL_USER != '' && env.AZURE_SQL_PASSWORD != '' }}
        shell: pwsh
        run: |
          $found = $false
          if (-not (Get-Command sqlcmd -ErrorAction SilentlyContinue)) {
            echo "sqlcmd not found — attempting install via Chocolatey..."
            try {
              choco install sqlserver-cmdline-utils -y --no-progress | Out-Null
            } catch {
              echo "::warning::Failed to install sqlcmd via Chocolatey"
            }
          }
          if (Get-Command sqlcmd -ErrorAction SilentlyContinue) {
            $found = $true
            echo "sqlcmd available."
          } else {
            echo "::notice::sqlcmd not available; migration application will be skipped"
          }
          echo "found=$found" >> $env:GITHUB_OUTPUT

      - name: 📜 Generate EF migration script
        if: ${{ env.BUSBUDDY_CONNECTION != '' }}
        shell: pwsh
        run: |
          echo "Generating idempotent EF migration script..."
          dotnet tool install --global dotnet-ef --version 9.* 2>$null | Out-Null
          $env:PATH += ";$env:USERPROFILE\.dotnet\tools"
          dotnet ef migrations script --idempotent --output migration-script.sql --project BusBuddy.Core/BusBuddy.Core.csproj --startup-project BusBuddy.WPF/BusBuddy.WPF.csproj

      - name: 🧩 Apply EF migrations to Azure SQL
        if: ${{ env.BUSBUDDY_CONNECTION != '' && env.AZURE_SQL_SERVER != '' && env.AZURE_SQL_USER != '' && env.AZURE_SQL_PASSWORD != '' && steps.ensure-sqlcmd.outputs.found == 'True' }}
        shell: pwsh
        run: |
          echo "Applying migrations to database..."
          sqlcmd -S "${{ env.AZURE_SQL_SERVER }}" -d "BusBuddyDb" -U "${{ env.AZURE_SQL_USER }}" -P "${{ env.AZURE_SQL_PASSWORD }}" -i migration-script.sql

      - name: 📤 Upload migration script
        if: ${{ env.BUSBUDDY_CONNECTION != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: migration-script-${{ github.run_number }}
          path: migration-script.sql
          retention-days: 7

      - name: 📦 Publish WPF application
        if: success() && github.event_name == 'push'
        run: |
          echo "Publishing WPF application..."
          dotnet publish BusBuddy.WPF/BusBuddy.WPF.csproj --configuration ${{ env.BUILD_CONFIGURATION }} --no-build --output ./publish --runtime win-x64

      - name: 📦 Archive build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-artifacts-${{ github.run_number }}
          path: |
            **/bin/Release/
            publish/
          retention-days: 7

      - name: 📊 Generate workflow summary
        if: always()
        shell: pwsh
        run: |
          echo "## 🚌 BusBuddy CI Summary" >> $env:GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $env:GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $env:GITHUB_STEP_SUMMARY
          echo "| Build & Test | ${{ job.status }} |" >> $env:GITHUB_STEP_SUMMARY
          echo "" >> $env:GITHUB_STEP_SUMMARY
          echo "${{ job.status == 'success' && '✅ Workflow PASSED' || '❌ Workflow FAILED - Check logs for details' }}" >> $env:GITHUB_STEP_SUMMARY
