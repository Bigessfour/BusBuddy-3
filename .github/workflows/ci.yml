# CI/CD Modernization Analysis and Updated Configuration
# BusBuddy - Comprehensive CI/CD Pipeline (Modernized for Finish Line Vision)
name: üöå BusBuddy CI/CD (Modernized)

env:
  DOTNET_VERSION: 9.0.304  # Updated from 9.0.303 per README
  BUILD_CONFIGURATION: Release
  SOLUTION_FILE: BusBuddy.sln
  COVERAGE_THRESHOLD: 90    # Enforces finish line 90%+ requirement

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]
  workflow_dispatch:

# Modernization Features:
# 1. bb* command integration throughout
# 2. Enhanced coverage enforcement (90% threshold)
# 3. Vision-specific validation gates
# 4. Performance monitoring for <2s DB operations
# 5. PowerShell module caching
# 6. Legacy pattern detection
# 7. MVP feature completeness checks

jobs:
  # Pre-flight validation for security and environment
  environment-validation:
    name: üîç Environment & Security Validation
    runs-on: windows-latest
    timeout-minutes: 10
    outputs:
      validation-passed: ${{ steps.validation.outputs.validation-passed }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîí Scan for potential secrets
        shell: pwsh
        run: |
          $files = git ls-files
          $patterns = @(
            '(?i)password\s*=\s*[^\s]+',
            '(?i)api[_-]?key\s*=\s*[^\s]+',
            '(?i)secret\s*=\s*[^\s]+',
            '(?i)connection(string)?\s*=\s*[^\s]+',
            '(?i)Authorization:\s*Bearer\s+\S+'
          )
          $secretIssues = @()
          foreach ($file in $files) {
            try {
              $matches = Select-String -Path $file -Pattern $patterns -SimpleMatch:$false -AllMatches -ErrorAction SilentlyContinue
              if ($matches) { $secretIssues += $matches }
            } catch { }
          }
          if ($secretIssues.Count -gt 0) {
            Write-Error "Found $($secretIssues.Count) potential secrets in code"
            exit 1
          } else {
            Write-Host "‚úÖ No potential secrets found."
          }

      - name: üîå Setup PowerShell 7.5.x (Enhanced)
        uses: PSModule/install-powershell@v1
        with:
          Version: 7.5.2  # Latest stable

      - name: ‚öôÔ∏è Setup .NET SDK (Enhanced)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          dotnet-quality: 'ga'

      - name: üßπ PowerShell Module Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/powershell/Modules
            ~/.nuget/packages
          key: ${{ runner.os }}-powershell-${{ hashFiles('**/*.psm1', '**/*.psd1', '**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-powershell-

      - name: üîß Load BusBuddy PowerShell Profile
        shell: pwsh
        run: |
          # Load the BusBuddy profile for bb* commands
          if (Test-Path "PowerShell/Profiles/Microsoft.PowerShell_profile.ps1") {
            . "PowerShell/Profiles/Microsoft.PowerShell_profile.ps1"
            Write-Host "‚úÖ BusBuddy PowerShell profile loaded"
          } else {
            Write-Warning "PowerShell profile not found - bb* commands may not be available"
          }

      - name: üè• Environment Health Check (bb* Integration)
        id: validation
        shell: pwsh
        run: |
          # Load profile and run health check
          if (Test-Path "PowerShell/Profiles/Microsoft.PowerShell_profile.ps1") {
            . "PowerShell/Profiles/Microsoft.PowerShell_profile.ps1"

            # Run comprehensive health check
            $healthResult = bbHealth -Detailed -ModernizationScan

            if ($healthResult.PowerShellVersion -and $healthResult.DotNetSDK -and $healthResult.SolutionFile) {
              Write-Host "‚úÖ Environment validation passed"
              "validation-passed=true" >> $env:GITHUB_OUTPUT

              # Report legacy patterns if found
              if ($healthResult.LegacyPatterns.Count -gt 0) {
                Write-Warning "‚ö†Ô∏è Found $($healthResult.LegacyPatterns.Count) legacy patterns - consider modernization"
                foreach ($pattern in $healthResult.LegacyPatterns) {
                  Write-Warning "  - $pattern"
                }
              }
            } else {
              Write-Error "‚ùå Environment validation failed"
              "validation-passed=false" >> $env:GITHUB_OUTPUT
              exit 1
            }
          } else {
            Write-Error "‚ùå Could not load BusBuddy profile for validation"
            "validation-passed=false" >> $env:GITHUB_OUTPUT
            exit 1
          }

  # Core build and test with enhanced bb* integration
  build-and-test:
    name: üèóÔ∏è Build & Test (Syncfusion ${{ matrix.syncfusion }})
    runs-on: windows-latest
    timeout-minutes: 25
    needs: [environment-validation]
    if: needs.environment-validation.outputs.validation-passed == 'true'
    outputs:
      coverage-percentage: ${{ steps.coverage.outputs.coverage-percentage }}
      build-success: ${{ steps.build.outputs.build-success }}
      test-success: ${{ steps.test.outputs.test-success }}
    strategy:
      fail-fast: false
      matrix:
        syncfusion: ["30.2.5"]
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîå Setup PowerShell 7.5.x
        uses: PSModule/install-powershell@v1
        with:
          Version: 7.5.2

      - name: ‚öôÔ∏è Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: ‚ôªÔ∏è Restore NuGet & PowerShell Modules Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.nuget/packages
            ~/.local/share/powershell/Modules
          key: ${{ runner.os }}-build-${{ env.DOTNET_VERSION }}-${{ hashFiles('**/*.csproj', '**/packages.lock.json', '**/*.psm1') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.DOTNET_VERSION }}-
            ${{ runner.os }}-build-

      - name: üîê Export secrets to environment
        shell: pwsh
        run: |
          $secrets = @{
            SYNCFUSION_LICENSE_KEY = '${{ secrets.SYNCFUSION_LICENSE_KEY }}'
            BUSBUDDY_CONNECTION    = '${{ secrets.BUSBUDDY_CONNECTION }}'
            AZURE_SUBSCRIPTION_ID  = '${{ secrets.AZURE_SUBSCRIPTION_ID }}'
            AZURE_SQL_SERVER       = '${{ secrets.AZURE_SQL_SERVER }}'
            AZURE_SQL_USER         = '${{ secrets.AZURE_SQL_USER }}'
            AZURE_SQL_PASSWORD     = '${{ secrets.AZURE_SQL_PASSWORD }}'
          }
          foreach ($k in $secrets.Keys) {
            $v = $secrets[$k]
            if ($null -ne $v -and $v -ne '') {
              Write-Output "::add-mask::$v"
              Add-Content -Path $env:GITHUB_ENV -Value "$k=$v"
            }
          }

      - name: üìå Syncfusion version validation
        shell: pwsh
        run: |
          $desired = "${{ matrix.syncfusion }}"
          $propsPath = "Directory.Build.props"
          [xml]$xml = Get-Content -Raw -Path $propsPath
          $node = ($xml.Project.PropertyGroup | ForEach-Object { $_.SyncfusionVersion } | Where-Object { $_ } | Select-Object -First 1)
          if (-not $node) { throw "Could not find <SyncfusionVersion> in $propsPath" }
          $current = try { $node.InnerText } catch { [string]$node }
          if ($current -ne $desired) {
            Write-Host "Updating SyncfusionVersion: $current -> $desired"
            $node.InnerText = $desired
            $xml.Save((Resolve-Path $propsPath))
          }
          Write-Host "‚úÖ SyncfusionVersion confirmed: $desired"

      - name: üîß Load BusBuddy Environment (bb* Commands)
        shell: pwsh
        run: |
          if (Test-Path "PowerShell/Profiles/Microsoft.PowerShell_profile.ps1") {
            . "PowerShell/Profiles/Microsoft.PowerShell_profile.ps1"
            Write-Host "‚úÖ BusBuddy PowerShell profile loaded"

            # Verify bb* commands are available
            $commands = @('bbHealth', 'bbBuild', 'bbTest', 'bbCommands')
            foreach ($cmd in $commands) {
              if (Get-Command $cmd -ErrorAction SilentlyContinue) {
                Write-Host "‚úÖ $cmd available"
              } else {
                Write-Warning "‚ö†Ô∏è $cmd not found"
              }
            }
          } else {
            Write-Error "‚ùå PowerShell profile not found"
            exit 1
          }

      - name: üèóÔ∏è Build Solution (bb* Integration)
        id: build
        shell: pwsh
        run: |
          # Load profile and build using bb* commands
          . "PowerShell/Profiles/Microsoft.PowerShell_profile.ps1"

          Write-Host "üî® Building solution using bbBuild..."
          $buildResult = bbBuild

          if ($buildResult) {
            Write-Host "‚úÖ Build succeeded"
            "build-success=true" >> $env:GITHUB_OUTPUT
          } else {
            Write-Error "‚ùå Build failed"
            "build-success=false" >> $env:GITHUB_OUTPUT
            exit 1
          }

      - name: üß™ Run Tests (bb* Integration)
        id: test
        shell: pwsh
        run: |
          # Load profile and test using bb* commands
          . "PowerShell/Profiles/Microsoft.PowerShell_profile.ps1"

          Write-Host "üß™ Running tests using bbTest..."
          try {
            bbTest
            Write-Host "‚úÖ Tests completed"
            "test-success=true" >> $env:GITHUB_OUTPUT
          } catch {
            Write-Warning "‚ö†Ô∏è Some tests may have failed: $_"
            "test-success=partial" >> $env:GITHUB_OUTPUT
            # Continue to coverage analysis
          }

      - name: üìà Calculate Coverage & Enforce Threshold
        id: coverage
        shell: pwsh
        run: |
          # Find coverage files
          $coverageFiles = Get-ChildItem -Recurse -Filter "coverage.cobertura.xml" -ErrorAction SilentlyContinue
          if (-not $coverageFiles) {
            Write-Warning "No coverage file found. Defaulting to 0%."
            "coverage-percentage=0" >> $env:GITHUB_OUTPUT
            exit 1
          }

          $file = $coverageFiles | Select-Object -First 1
          Write-Host "Using coverage file: $($file.FullName)"
          [xml]$xml = Get-Content -Raw -Path $file.FullName
          $rate = $xml.coverage.'line-rate'
          if (-not $rate) { $rate = 0 }
          $pct = [math]::Round(([double]$rate) * 100, 2)

          Write-Host "üìä Coverage: $pct%"
          "coverage-percentage=$pct" >> $env:GITHUB_OUTPUT

          # Enforce 90% threshold per finish line requirements
          $threshold = ${{ env.COVERAGE_THRESHOLD }}
          if ($pct -lt $threshold) {
            Write-Error "‚ùå Coverage $pct% below required threshold of $threshold%"
            exit 1
          } else {
            Write-Host "‚úÖ Coverage $pct% meets threshold of $threshold%"
          }

      - name: üì¶ Upload Coverage Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report-${{ matrix.syncfusion }}-${{ github.run_number }}
          path: |
            **/coverage.cobertura.xml
            **/TestResults/**/*.trx
          retention-days: 7

  # Vision-specific validation for MVP features
  vision-validation:
    name: üéØ Vision & MVP Validation
    runs-on: windows-latest
    timeout-minutes: 15
    needs: [build-and-test]
    if: needs.build-and-test.outputs.build-success == 'true'
    outputs:
      vision-compliance: ${{ steps.vision-check.outputs.vision-compliance }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîå Setup PowerShell 7.5.x
        uses: PSModule/install-powershell@v1
        with:
          Version: 7.5.2

      - name: üîß Load BusBuddy Environment
        shell: pwsh
        run: |
          . "PowerShell/Profiles/Microsoft.PowerShell_profile.ps1"

      - name: üîç Anti-Regression Scan (Legacy Patterns)
        shell: pwsh
        run: |
          . "PowerShell/Profiles/Microsoft.PowerShell_profile.ps1"

          Write-Host "üîç Running anti-regression scan..."
          if (Get-Command bbAntiRegression -ErrorAction SilentlyContinue) {
            $result = bbAntiRegression
            if ($result.ViolationsFound -gt 0) {
              Write-Error "‚ùå Found $($result.ViolationsFound) compliance violations"
              exit 1
            } else {
              Write-Host "‚úÖ No compliance violations found"
            }
          } else {
            Write-Warning "bbAntiRegression command not available - using bbHealth instead"
            $health = bbHealth -ModernizationScan
            if ($health.LegacyPatterns.Count -gt 0) {
              Write-Warning "‚ö†Ô∏è Found $($health.LegacyPatterns.Count) legacy patterns to modernize"
              foreach ($pattern in $health.LegacyPatterns) {
                Write-Warning "  - $pattern"
              }
            }
          }

      - name: üéØ MVP Feature Completeness Check
        id: vision-check
        shell: pwsh
        run: |
          . "PowerShell/Profiles/Microsoft.PowerShell_profile.ps1"

          Write-Host "üéØ Checking MVP feature completeness..."

          # Check for key MVP components per finish line vision
          $mvpFeatures = @{
            "Student Management" = @("BusBuddy.WPF/Views/Student", "BusBuddy.Core/Models/Student.cs")
            "Vehicle Management" = @("BusBuddy.WPF/Views/Vehicle", "BusBuddy.Core/Models/Bus.cs")
            "Route Management" = @("BusBuddy.WPF/Views/Route", "BusBuddy.Core/Models/Route.cs")
            "Dashboard" = @("BusBuddy.WPF/Views/Dashboard", "BusBuddy.WPF/ViewModels/Dashboard")
            "Syncfusion Integration" = @("Syncfusion.SfDataGrid", "Syncfusion.SfScheduler")
          }

          $missingFeatures = @()
          $completedFeatures = @()

          foreach ($feature in $mvpFeatures.Keys) {
            $paths = $mvpFeatures[$feature]
            $found = $false

            foreach ($path in $paths) {
              if ((Test-Path $path) -or (Get-ChildItem -Recurse -Filter "*$path*" -ErrorAction SilentlyContinue)) {
                $found = $true
                break
              }
            }

            if ($found) {
              $completedFeatures += $feature
              Write-Host "‚úÖ $feature - Found"
            } else {
              $missingFeatures += $feature
              Write-Warning "‚ö†Ô∏è $feature - Missing or incomplete"
            }
          }

          $completionRate = [math]::Round(($completedFeatures.Count / $mvpFeatures.Count) * 100, 1)
          Write-Host "üìä MVP Completion: $completionRate% ($($completedFeatures.Count)/$($mvpFeatures.Count) features)"

          if ($completionRate -ge 80) {
            Write-Host "‚úÖ MVP feature set is substantially complete"
            "vision-compliance=compliant" >> $env:GITHUB_OUTPUT
          } else {
            Write-Warning "‚ö†Ô∏è MVP feature set needs development - $($missingFeatures.Count) features missing"
            "vision-compliance=partial" >> $env:GITHUB_OUTPUT
          }

  # Performance validation for finish line <2s requirements
  performance-validation:
    name: ‚ö° Performance Validation
    runs-on: windows-latest
    timeout-minutes: 10
    needs: [build-and-test]
    if: needs.build-and-test.outputs.build-success == 'true'
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîå Setup PowerShell 7.5.x
        uses: PSModule/install-powershell@v1
        with:
          Version: 7.5.2

      - name: ‚öôÔ∏è Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: ‚ö° Performance Benchmarks
        shell: pwsh
        run: |
          Write-Host "‚ö° Running performance validations..."

          # Test bb* command performance
          if (Test-Path "PowerShell/Profiles/Microsoft.PowerShell_profile.ps1") {
            . "PowerShell/Profiles/Microsoft.PowerShell_profile.ps1"

            # Measure bbHealth execution time
            $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()
            bbHealth -Detailed | Out-Null
            $stopwatch.Stop()

            $healthTime = $stopwatch.ElapsedMilliseconds
            Write-Host "üìä bbHealth execution: $healthTime ms"

            if ($healthTime -gt 5000) {  # 5 second threshold
              Write-Warning "‚ö†Ô∏è bbHealth took $healthTime ms - consider optimization"
            } else {
              Write-Host "‚úÖ bbHealth performance acceptable: $healthTime ms"
            }
          }

          # Test build performance
          $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()
          dotnet build ${{ env.SOLUTION_FILE }} --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore --verbosity minimal
          $stopwatch.Stop()

          $buildTime = $stopwatch.ElapsedMilliseconds
          Write-Host "üìä Build time: $buildTime ms"

          if ($buildTime -gt 120000) {  # 2 minute threshold
            Write-Warning "‚ö†Ô∏è Build took $($buildTime/1000) seconds - consider optimization"
          } else {
            Write-Host "‚úÖ Build performance acceptable: $($buildTime/1000) seconds"
          }

  # Aggregate results and notifications
  ci-summary:
    name: üìã CI Summary & Notifications
    runs-on: windows-latest
    timeout-minutes: 5
    needs: [environment-validation, build-and-test, vision-validation, performance-validation]
    if: always()
    steps:
      - name: üìä Generate CI Summary
        shell: pwsh
        run: |
          Write-Host "=== BusBuddy CI/CD Summary ==="
          Write-Host "Environment: ${{ needs.environment-validation.outputs.validation-passed }}"
          Write-Host "Build: ${{ needs.build-and-test.outputs.build-success }}"
          Write-Host "Tests: ${{ needs.build-and-test.outputs.test-success }}"
          Write-Host "Coverage: ${{ needs.build-and-test.outputs.coverage-percentage }}%"
          Write-Host "Vision Compliance: ${{ needs.vision-validation.outputs.vision-compliance }}"

          $overallSuccess = '${{ needs.environment-validation.outputs.validation-passed }}' -eq 'true' -and
                           '${{ needs.build-and-test.outputs.build-success }}' -eq 'true' -and
                           '${{ needs.build-and-test.outputs.test-success }}' -in @('true', 'partial')

          if ($overallSuccess) {
            Write-Host "üéâ CI Pipeline: SUCCESS"
            $coverage = [double]'${{ needs.build-and-test.outputs.coverage-percentage }}'
            if ($coverage -ge ${{ env.COVERAGE_THRESHOLD }}) {
              Write-Host "‚úÖ Ready for finish line validation"
            } else {
              Write-Host "‚ö†Ô∏è Coverage below finish line threshold"
            }
          } else {
            Write-Host "‚ùå CI Pipeline: FAILURE"
            Write-Host "Review failed jobs above for details"
          }

      - name: üîî Failure Notification (Future Enhancement)
        if: failure()
        shell: pwsh
        run: |
          # Placeholder for Slack/Teams/Email notifications
          # Add notification integration here when ready for production
          Write-Host "üîî Failure notification would be sent here"
          Write-Host "Consider adding Slack webhook or email notification action"
