name: üöå BusBuddy CI Pipeline

on:
  push:
    branches: [master, main, develop]
  pull_request:
    branches: [master, main]
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: "Enable debug mode for troubleshooting"
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOTNET_VERSION: "9.0.x"
  SOLUTION_FILE: "BusBuddy.sln"
  BUILD_CONFIGURATION: "Release"
  # GitHub CLI configuration - disable paging for CI logs
  GH_PAGER: ""
  GH_NO_UPDATE_NOTIFIER: "1"
  # PowerShell configuration for CI
  POWERSHELL_TELEMETRY_OPTOUT: "1"

jobs:
  build-and-test:
    name: üèóÔ∏è Build & Test
    runs-on: windows-latest
    timeout-minutes: 30
    strategy:
      matrix:
        platform: [x64, x86]
      fail-fast: false

    outputs:
      build-success: ${{ steps.build-step.outcome == 'success' }}
      test-success: ${{ steps.test-step.outcome == 'success' }}
      coverage-percentage: ${{ steps.coverage-step.outputs.coverage || '0' }}
      build-time: ${{ steps.timing.outputs.build-time || '0' }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Enable GitVersion and better diff analysis

      - name: ‚è±Ô∏è Start timing
        id: timing
        run: |
          echo "start-time=$(Get-Date -UFormat %s)" >> $env:GITHUB_OUTPUT
          echo "üïê Workflow started at $(Get-Date)"

      - name: üèóÔ∏è Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: üì¶ Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.nuget/packages
            ${{ github.workspace }}/**/obj/project.assets.json
            ${{ github.workspace }}/**/obj/*.csproj.nuget.*
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: üîß Restore dependencies
        run: |
          echo "üîÑ Restoring NuGet packages..."
          dotnet restore ${{ env.SOLUTION_FILE }} --verbosity normal
          echo "‚úÖ Package restoration completed"

      - name: üèóÔ∏è Build solution
        id: build-step
        run: |
          echo "üî® Building Bus Buddy solution for ${{ matrix.platform }}..."
          dotnet build ${{ env.SOLUTION_FILE }} --no-restore --configuration ${{ env.BUILD_CONFIGURATION }} --verbosity normal
          echo "‚úÖ Build completed successfully"

      - name: üß™ Run tests with coverage
        id: test-step
        run: |
          echo "üß™ Running tests with coverage..."

          # Create TestResults directory if it doesn't exist
          mkdir -Force ./TestResults 2>$null

          # Check if test projects exist
          $testProjects = Get-ChildItem -Path . -Recurse -Include "*.Tests.csproj", "*Test*.csproj" -ErrorAction SilentlyContinue

          if ($testProjects.Count -gt 0) {
            echo "üìã Found $($testProjects.Count) test projects:"
            foreach ($project in $testProjects) {
              echo "   - $($project.Name)"
            }

            echo "üöÄ Running all tests with coverage collection..."
            dotnet test ${{ env.SOLUTION_FILE }} --no-build --configuration ${{ env.BUILD_CONFIGURATION }} --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./TestResults --logger trx

            echo "‚úÖ Tests completed with coverage data"
          } else {
            echo "üìù No test projects found yet - creating minimal test result for workflow"
            echo "This is normal for early development phase"

            # Create a minimal valid TRX file
            echo '<?xml version="1.0" encoding="UTF-8"?><TestRun xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010"><ResultSummary outcome="Completed"><Counters total="0" executed="0" passed="0" failed="0" /></ResultSummary></TestRun>' > ./TestResults/placeholder-results.trx

            echo "üìã Created placeholder test results for workflow compatibility"
          }

      - name: üìä Generate coverage report
        id: coverage-step
        run: |
          echo "üìä Generating coverage reports..."

          # Find coverage files
          $coverageFiles = Get-ChildItem -Path "./TestResults" -Filter "coverage.cobertura.xml" -Recurse

          if ($coverageFiles.Count -gt 0) {
            # Extract coverage percentage
            $coverageFile = $coverageFiles[0].FullName
            [xml]$coverage = Get-Content $coverageFile
            $lineRate = [double]$coverage.coverage.'line-rate'
            $coveragePercent = [math]::Round($lineRate * 100, 2)

            echo "coverage=$coveragePercent" >> $env:GITHUB_OUTPUT
            echo "‚úÖ Coverage: $coveragePercent%"
          } else {
            echo "coverage=0" >> $env:GITHUB_OUTPUT
            echo "‚ö†Ô∏è No coverage files found"
          }

      - name: üìä Publish test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: "BusBuddy Test Results (${{ matrix.platform }})"
          path: "**/TestResults/*.trx"
          reporter: "dotnet-trx"
          fail-on-error: false
          only-summary: false

      - name: üì¶ Publish WPF application
        if: success() && github.event_name != 'pull_request'
        run: |
          echo "üì¶ Publishing WPF application for ${{ matrix.platform }}..."
          dotnet publish BusBuddy.WPF/BusBuddy.WPF.csproj --configuration ${{ env.BUILD_CONFIGURATION }} --no-build --output ./publish-${{ matrix.platform }} --runtime win-${{ matrix.platform }}

      - name: üì¶ Archive build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-artifacts-${{ matrix.platform }}-${{ github.run_number }}
          path: |
            **/bin/Release/
            **/TestResults/
            publish-${{ matrix.platform }}/
            **/*.log
          retention-days: 7

      - name: ‚è±Ô∏è Calculate build time
        if: always()
        run: |
          $startTime = "${{ steps.timing.outputs.start-time || '0' }}"
          $endTime = [int][double]::Parse((Get-Date -UFormat %s))
          if ($startTime -ne "0") {
            $buildTime = $endTime - [int]$startTime
          } else {
            $buildTime = 0
          }
          echo "build-time=$buildTime" >> $env:GITHUB_OUTPUT
          echo "üïê Total build time: ${buildTime} seconds"

      - name: üìù Create build summary
        if: always()
        run: |
          echo "## üöå BusBuddy CI Pipeline Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Platform | ${{ matrix.platform }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Status | ${{ steps.build-step.outcome == 'success' && '‚úÖ Success' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Status | ${{ steps.test-step.outcome == 'success' && '‚úÖ Success' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Coverage | ${{ steps.coverage-step.outputs.coverage || '0' }}% |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Time | ${{ steps.timing.outputs.build-time || '0' }}s |" >> $GITHUB_STEP_SUMMARY
          echo "| Configuration | ${{ env.BUILD_CONFIGURATION }} |" >> $GITHUB_STEP_SUMMARY
          echo "| .NET Version | ${{ env.DOTNET_VERSION }} |" >> $GITHUB_STEP_SUMMARY

  quality-analysis:
    name: üîç Quality Analysis
    runs-on: windows-latest
    timeout-minutes: 20
    needs: build-and-test

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üèóÔ∏è Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: üìä Quality metrics analysis
        id: quality-metrics
        shell: pwsh
        run: |
          echo "üìä Analyzing code quality metrics..."

          # Count files and lines
          $csFiles = (Get-ChildItem -Path . -Recurse -Include "*.cs" -Exclude "bin","obj","Migrations","*.g.cs","*.designer.cs" | Measure-Object).Count
          $xamlFiles = (Get-ChildItem -Path . -Recurse -Include "*.xaml" -Exclude "bin","obj" | Measure-Object).Count
          $testFiles = (Get-ChildItem -Path . -Recurse -Include "*Test*.cs","*Tests.cs" -Exclude "bin","obj" | Measure-Object).Count
          $viewModelFiles = (Get-ChildItem -Path . -Recurse -Include "*ViewModel.cs" -Exclude "bin","obj" | Measure-Object).Count
          $serviceFiles = (Get-ChildItem -Path . -Recurse -Include "*Service.cs" -Exclude "bin","obj" | Measure-Object).Count

          # Calculate code metrics
          $testCoverage = if ($csFiles -gt 0) { [math]::Round(($testFiles / $csFiles) * 100, 1) } else { 0 }

          # Check XML/JSON file validity
          $xmlFiles = Get-ChildItem -Recurse -Filter "*.xml" | Where-Object {
            $_.FullName -notlike "*bin*" -and
            $_.FullName -notlike "*obj*" -and
            $_.FullName -notlike "*packages*"
          }

          $jsonFiles = Get-ChildItem -Recurse -Filter "*.json" | Where-Object {
            $_.FullName -notlike "*node_modules*" -and
            $_.FullName -notlike "*bin*" -and
            $_.FullName -notlike "*obj*"
          }

          $xmlInvalid = 0
          $jsonInvalid = 0

          foreach ($file in $xmlFiles) {
            try {
              [xml](Get-Content $file.FullName) | Out-Null
            } catch {
              $xmlInvalid++
            }
          }

          foreach ($file in $jsonFiles) {
            try {
              Get-Content $file.FullName -Raw | ConvertFrom-Json | Out-Null
            } catch {
              $jsonInvalid++
            }
          }

          # Output metrics
          echo "cs-files=$csFiles" >> $env:GITHUB_OUTPUT
          echo "xaml-files=$xamlFiles" >> $env:GITHUB_OUTPUT
          echo "test-files=$testFiles" >> $env:GITHUB_OUTPUT
          echo "test-coverage=$testCoverage" >> $env:GITHUB_OUTPUT
          echo "viewmodel-files=$viewModelFiles" >> $env:GITHUB_OUTPUT
          echo "service-files=$serviceFiles" >> $env:GITHUB_OUTPUT
          echo "xml-invalid=$xmlInvalid" >> $env:GITHUB_OUTPUT
          echo "json-invalid=$jsonInvalid" >> $env:GITHUB_OUTPUT

          echo "üìã Quality Metrics:"
          echo "   üìÑ C# files: $csFiles"
          echo "   üìÑ XAML files: $xamlFiles"
          echo "   üß™ Test files: $testFiles"
          echo "   üìä Test ratio: $testCoverage%"
          echo "   üèóÔ∏è ViewModels: $viewModelFiles"
          echo "   ‚öôÔ∏è Services: $serviceFiles"
          echo "   üìù Invalid XML files: $xmlInvalid"
          echo "   üìù Invalid JSON files: $jsonInvalid"

      - name: ‚úÖ Quality gate evaluation
        id: quality-gate
        shell: pwsh
        run: |
          echo "‚úÖ Evaluating quality gate criteria..."

          $csFiles = [int]"${{ steps.quality-metrics.outputs.cs-files }}"
          $testFiles = [int]"${{ steps.quality-metrics.outputs.test-files }}"
          $testCoverage = [float]"${{ steps.quality-metrics.outputs.test-coverage }}"
          $xmlInvalid = [int]"${{ steps.quality-metrics.outputs.xml-invalid }}"
          $jsonInvalid = [int]"${{ steps.quality-metrics.outputs.json-invalid }}"

          $passed = $true
          $issues = @()

          # Quality gate rules
          if ($xmlInvalid -gt 0) {
            $issues += "‚ùå Found $xmlInvalid invalid XML files"
            $passed = $false
          }

          if ($jsonInvalid -gt 0) {
            $issues += "‚ùå Found $jsonInvalid invalid JSON files"
            $passed = $false
          }

          if ($csFiles -gt 50 -and $testCoverage -lt 20) {
            $issues += "‚ö†Ô∏è Test coverage ratio below 20% for mature codebase"
            # Only warn, don't fail
          }

          if ($csFiles -gt 100 -and $testFiles -eq 0) {
            $issues += "‚ö†Ô∏è No test files found for large codebase"
            # Only warn, don't fail
          }

          echo "quality-gate-passed=$passed" >> $env:GITHUB_OUTPUT
          echo "issues-found=$($issues.Count)" >> $env:GITHUB_OUTPUT

          if ($passed) {
            echo "‚úÖ Quality gate PASSED"
          } else {
            echo "‚ùå Quality gate FAILED with the following issues:"
            foreach ($issue in $issues) {
              echo "   $issue"
            }
          }

      - name: üîí Security scan
        id: security-scan
        shell: pwsh
        run: |
          echo "üîí Running security scan..."

          # Scan for vulnerable dependencies
          dotnet list package --vulnerable --include-transitive > vulnerability-report.txt 2>&1
          $vulnerableCount = (Select-String -Path vulnerability-report.txt -Pattern "has the following vulnerable packages" | Measure-Object).Count

          # Scan for potential secrets
          $patterns = @(
            'password\s*=\s*"[^"]*"',
            'api[_-]?key\s*=\s*"[^"]*"',
            'secret\s*=\s*"[^"]*"',
            'token\s*=\s*"[^"]*"',
            'connection[_-]?string\s*=\s*"[^"]*"'
          )

          $secretIssues = @()
          $files = Get-ChildItem -Recurse -Include "*.cs","*.json","*.xml","*.config" | Where-Object {
            $_.FullName -notlike "*bin*" -and
            $_.FullName -notlike "*obj*"
          }

          foreach ($file in $files) {
            $content = Get-Content $file.FullName -Raw
            foreach ($pattern in $patterns) {
              if ($content -match $pattern) {
                $secretIssues += "‚ö†Ô∏è Potential secret in $($file.Name)"
              }
            }
          }

          echo "vulnerable-packages=$vulnerableCount" >> $env:GITHUB_OUTPUT
          echo "potential-secrets=$($secretIssues.Count)" >> $env:GITHUB_OUTPUT

          echo "üîí Security Scan Results:"
          echo "   ‚ö†Ô∏è Vulnerable packages: $vulnerableCount"
          echo "   ‚ö†Ô∏è Potential secrets: $($secretIssues.Count)"

          if ($secretIssues.Count -gt 0) {
            echo "‚ö†Ô∏è Potential security issues found:"
            $secretIssues | ForEach-Object { echo "   $_" }
          }

      - name: üìä Repository size analysis
        id: repo-size
        shell: pwsh
        run: |
          echo "üìä Analyzing repository size..."

          $totalSize = (Get-ChildItem -Recurse | Measure-Object -Property Length -Sum).Sum
          $sizeMB = [math]::Round($totalSize / 1MB, 2)

          # Find large files
          $largeFiles = Get-ChildItem -Recurse | Where-Object {
            $_.Length -gt 10MB -and -not $_.PSIsContainer
          } | Sort-Object Length -Descending | Select-Object -First 5

          $largeFilesCount = $largeFiles.Count

          echo "repo-size-mb=$sizeMB" >> $env:GITHUB_OUTPUT
          echo "large-files-count=$largeFilesCount" >> $env:GITHUB_OUTPUT

          echo "üìä Repository Size: $sizeMB MB"

          if ($largeFilesCount -gt 0) {
            echo "‚ö†Ô∏è Found $largeFilesCount large files (>10MB):"
            foreach ($file in $largeFiles) {
              $fileSizeMB = [math]::Round($file.Length / 1MB, 2)
              echo "   üìÅ $($file.FullName.Replace($PWD, '.')) - $fileSizeMB MB"
            }
          }

      - name: üìã Generate comprehensive quality report
        if: always()
        shell: pwsh
        run: |
          echo "## üéØ Comprehensive Quality Gate Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Code Metrics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| C# Files | ${{ steps.quality-metrics.outputs.cs-files }} | ‚úÖ |" >> $GITHUB_STEP_SUMMARY
          echo "| XAML Files | ${{ steps.quality-metrics.outputs.xaml-files }} | ‚úÖ |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Files | ${{ steps.quality-metrics.outputs.test-files }} | üìä |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Ratio | ${{ steps.quality-metrics.outputs.test-coverage }}% | üìà |" >> $GITHUB_STEP_SUMMARY
          echo "| ViewModels | ${{ steps.quality-metrics.outputs.viewmodel-files }} | üèóÔ∏è |" >> $GITHUB_STEP_SUMMARY
          echo "| Services | ${{ steps.quality-metrics.outputs.service-files }} | ‚öôÔ∏è |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### üîí Security Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Vulnerable Packages | ${{ steps.security-scan.outputs.vulnerable-packages }} | ${{ steps.security-scan.outputs.vulnerable-packages == '0' && '‚úÖ' || '‚ö†Ô∏è' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Potential Secrets | ${{ steps.security-scan.outputs.potential-secrets }} | ${{ steps.security-scan.outputs.potential-secrets == '0' && '‚úÖ' || '‚ö†Ô∏è' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### üìÅ Repository Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Repository Size | ${{ steps.repo-size.outputs.repo-size-mb }} MB | ${{ steps.repo-size.outputs.repo-size-mb < 300 && '‚úÖ' || '‚ö†Ô∏è' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Large Files (>10MB) | ${{ steps.repo-size.outputs.large-files-count }} | ${{ steps.repo-size.outputs.large-files-count == '0' && '‚úÖ' || '‚ö†Ô∏è' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Invalid XML Files | ${{ steps.quality-metrics.outputs.xml-invalid }} | ${{ steps.quality-metrics.outputs.xml-invalid == '0' && '‚úÖ' || '‚ùå' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Invalid JSON Files | ${{ steps.quality-metrics.outputs.json-invalid }} | ${{ steps.quality-metrics.outputs.json-invalid == '0' && '‚úÖ' || '‚ùå' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### ‚úÖ Quality Gate Result" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Gate | Status | Issues |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Overall Result | ${{ steps.quality-gate.outputs.quality-gate-passed == 'true' && '‚úÖ PASSED' || '‚ùå FAILED' }} | ${{ steps.quality-gate.outputs.issues-found }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**üí° Recommendation:** Focus on test coverage for critical business logic and ViewModels" >> $GITHUB_STEP_SUMMARY

          if (${{ steps.quality-gate.outputs.quality-gate-passed != 'true' }}) {
            echo "**‚ùå Action Required:** Fix quality gate issues before merging" >> $GITHUB_STEP_SUMMARY
          }

  security-scan:
    name: üîí Security Scan
    runs-on: windows-latest
    needs: build-and-test
    if: github.event_name == 'push'

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üèóÔ∏è Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: üîç Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: csharp

      - name: üîß Restore and build for analysis
        run: |
          dotnet restore ${{ env.SOLUTION_FILE }}
          dotnet build ${{ env.SOLUTION_FILE }} --no-restore --configuration Release

      - name: üîç Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: üìä Create security summary
        if: always()
        run: |
          echo "## üîí Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL Analysis | ‚úÖ Completed |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ‚úÖ Completed in Quality Analysis |" >> $GITHUB_STEP_SUMMARY

  repository-health:
    name: üè• Repository Health
    runs-on: windows-latest
    needs: build-and-test

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üìä Repository Size Analysis
        shell: pwsh
        run: |
          Write-Host "üîç Analyzing repository size..." -ForegroundColor Cyan

          $totalSize = (Get-ChildItem -Recurse | Measure-Object -Property Length -Sum).Sum
          $sizeMB = [math]::Round($totalSize / 1MB, 2)

          Write-Host "üìä Repository Size: $sizeMB MB" -ForegroundColor Cyan

          # Check for large files
          $largeFiles = Get-ChildItem -Recurse | Where-Object {
            $_.Length -gt 10MB -and -not $_.PSIsContainer
          } | Sort-Object Length -Descending | Select-Object -First 10

          if ($largeFiles) {
            Write-Host "‚ö†Ô∏è Large files found (>10MB):" -ForegroundColor Yellow
            $largeFiles | ForEach-Object {
              $fileSizeMB = [math]::Round($_.Length / 1MB, 2)
              Write-Host "  üìÅ $($_.FullName.Replace($PWD, '.')) - $fileSizeMB MB" -ForegroundColor Yellow
            }
          }

          # Size warnings
          if ($sizeMB -gt 500) {
            Write-Host "‚ö†Ô∏è Repository size exceeds 500MB - optimization recommended" -ForegroundColor Yellow
          } elseif ($sizeMB -gt 300) {
            Write-Host "‚ö†Ô∏è Repository size exceeds 300MB - monitoring recommended" -ForegroundColor Yellow
          } else {
            Write-Host "‚úÖ Repository size is within acceptable limits" -ForegroundColor Green
          }

          echo "## üìä Repository Health Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Repository Size | $sizeMB MB | $($sizeMB -lt 300 ? '‚úÖ' : '‚ö†Ô∏è') |" >> $GITHUB_STEP_SUMMARY
          echo "| Large Files (>10MB) | $($largeFiles.Count) | $($largeFiles.Count -eq 0 ? '‚úÖ' : '‚ö†Ô∏è') |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if ($largeFiles.Count -gt 0) {
            echo "### ‚ö†Ô∏è Large Files" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| File | Size |" >> $GITHUB_STEP_SUMMARY
            echo "|------|------|" >> $GITHUB_STEP_SUMMARY
            $largeFiles | ForEach-Object {
              $fileSizeMB = [math]::Round($_.Length / 1MB, 2)
              echo "| $($_.FullName.Replace($PWD, '.')) | $fileSizeMB MB |" >> $GITHUB_STEP_SUMMARY
            }
          }

  notify-completion:
    name: üì¢ Workflow Summary
    runs-on: ubuntu-latest
    needs: [build-and-test, quality-analysis, security-scan, repository-health]
    if: always()

    steps:
      - name: üìä Generate workflow summary
        shell: bash
        run: |
          echo "## üöå BusBuddy CI Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| üèóÔ∏è Build & Test | ${{ needs.build-and-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üîç Quality Analysis | ${{ needs.quality-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üîí Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üè• Repository Health | ${{ needs.repository-health.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Overall status
          if [[ "${{ needs.build-and-test.result }}" == "success" && "${{ needs.quality-analysis.result }}" != "failure" && "${{ needs.security-scan.result }}" != "failure" && "${{ needs.repository-health.result }}" != "failure" ]]; then
            echo "### ‚úÖ Overall Status: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå Overall Status: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please check the job logs for more details on failures." >> $GITHUB_STEP_SUMMARY
          fi
