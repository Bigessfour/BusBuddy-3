name: üöÄ Production Release Pipeline

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOTNET_VERSION: "9.0.x"
  SOLUTION_FILE: "BusBuddy.sln"
  BUILD_CONFIGURATION: "Release"

jobs:
  production-build:
    runs-on: windows-latest
    environment: production
    timeout-minutes: 45
    strategy:
      matrix:
        platform: [x64, x86]
      fail-fast: false

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üèóÔ∏è Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # Syncfusion licensing ‚Äî set env var for build (official docs: https://help.syncfusion.com/wpf/wpf-license-registration)
      - name: Set Syncfusion License
        shell: pwsh
        env:
          SYNCFUSION_LICENSE_KEY: ${{ secrets.SYNCFUSION_LICENSE_KEY }}
        run: |
          if (-not $env:SYNCFUSION_LICENSE_KEY) {
            Write-Host "SYNCFUSION_LICENSE_KEY not set; build may show license warnings."
            exit 0
          }
          echo "SYNCFUSION_LICENSE_KEY=$env:SYNCFUSION_LICENSE_KEY" >> $env:GITHUB_ENV

      - name: üì¶ Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.nuget/packages
            ${{ github.workspace }}/**/obj/project.assets.json
            ${{ github.workspace }}/**/obj/*.csproj.nuget.*
          key: ${{ runner.os }}-nuget-production-${{ hashFiles('**/*.csproj', '**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-production-
            ${{ runner.os }}-nuget-

      - name: üîß Restore dependencies
        run: |
          echo "üîÑ Restoring NuGet packages for production..."
          dotnet restore ${{ env.SOLUTION_FILE }} --verbosity normal

      - name: üèóÔ∏è Build production release
        run: |
          echo "üî® Building Bus Buddy for production..."
          dotnet build ${{ env.SOLUTION_FILE }} --no-restore --configuration ${{ env.BUILD_CONFIGURATION }} --verbosity normal

      - name: üß™ Run full test suite
        run: |
          echo "üß™ Running comprehensive test suite..."
          dotnet test ${{ env.SOLUTION_FILE }} --no-build --configuration ${{ env.BUILD_CONFIGURATION }} --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./TestResults --logger trx

      - name: üì¶ Publish application
        run: |
          echo "üì¶ Publishing Bus Buddy application for ${{ matrix.platform }}..."
          dotnet publish BusBuddy.WPF/BusBuddy.WPF.csproj --no-build --configuration ${{ env.BUILD_CONFIGURATION }} --output ./publish-${{ matrix.platform }} --verbosity normal --runtime win-${{ matrix.platform }}

      - name: üìÅ Create release archive
        run: |
          echo "üìÅ Creating release archive for ${{ matrix.platform }}..."
          $releaseVersion = "${{ github.event.inputs.release_version || github.event.release.tag_name }}"
          $archiveName = "BusBuddy-$releaseVersion-windows-${{ matrix.platform }}.zip"
          Compress-Archive -Path "./publish-${{ matrix.platform }}/*" -DestinationPath "./$archiveName"
          echo "‚úÖ Created release archive: $archiveName"

      - name: üöÄ Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: production-release-${{ matrix.platform }}
          path: "BusBuddy-*.zip"
          retention-days: 90

      - name: üìã Create release summary
        run: |
          echo "## üöÄ Production Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Release Version | ${{ github.event.inputs.release_version || github.event.release.tag_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Platform | ${{ matrix.platform }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Configuration | ${{ env.BUILD_CONFIGURATION }} |" >> $GITHUB_STEP_SUMMARY
          echo "| .NET Version | ${{ env.DOTNET_VERSION }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | Production |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**‚úÖ Production build completed successfully!**" >> $GITHUB_STEP_SUMMARY

  combine-release-artifacts:
    name: üîÑ Combine Release Artifacts
    runs-on: ubuntu-latest
    needs: production-build

    steps:
      - name: üì• Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: production-release-*
          merge-multiple: true
          path: release-artifacts

      - name: üì¶ Create combined artifact
        uses: actions/upload-artifact@v4
        with:
          name: production-release-all-platforms
          path: release-artifacts/*.zip
          retention-days: 90

      - name: üìã Create combined summary
        run: |
          echo "## üöÄ Multi-Platform Production Release" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Platform | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Windows x64 | ‚úÖ Built |" >> $GITHUB_STEP_SUMMARY
          echo "| Windows x86 | ‚úÖ Built |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**‚úÖ All platform builds completed successfully!**" >> $GITHUB_STEP_SUMMARY

  db-apply-and-seed:
    name: üóÑÔ∏è DB Migrations & Seeding (reusable)
    needs: production-build
    if: ${{ github.event_name != 'pull_request' }}
    uses: ./.github/workflows/db-migrations-seed.yml
    with:
      seed: true
    secrets:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      BUSBUDDY_CONNECTION: ${{ secrets.BUSBUDDY_CONNECTION }}
      AZURE_SQL_SERVER: ${{ secrets.AZURE_SQL_SERVER }}
      AZURE_SQL_USER: ${{ secrets.AZURE_SQL_USER }}
      AZURE_SQL_PASSWORD: ${{ secrets.AZURE_SQL_PASSWORD }}





