name: 🎯 Code Quality Gate

on:
  pull_request:
    branches: [main, master]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOTNET_VERSION: "9.0.x"
  SOLUTION_FILE: "BusBuddy.sln"

jobs:
  quality-gate:
    runs-on: windows-latest
    timeout-minutes: 20

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Enable GitVersion

      - name: 🏗️ Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 🔧 Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_FILE }}

      - name: 🏗️ Build solution
        run: dotnet build ${{ env.SOLUTION_FILE }} --no-restore --configuration Release

      - name: 🧪 Run tests with coverage
        run: |
          dotnet test ${{ env.SOLUTION_FILE }} --no-build --configuration Release --collect:"XPlat Code Coverage" --results-directory ./TestResults --logger trx || echo "Tests completed with issues"

      - name: 📏 Enforce coverage threshold (Cobertura)
        id: coverage
        shell: pwsh
        run: |
          $threshold = 70.0
          $resultsDir = Join-Path (Get-Location) 'TestResults'
          $files = @()
          if (Test-Path $resultsDir) {
            $files = Get-ChildItem -Path $resultsDir -Recurse -Filter 'coverage.cobertura.xml' -ErrorAction SilentlyContinue
          }
          if (-not $files -or $files.Count -eq 0) {
            Write-Warning 'No Cobertura coverage files found under ./TestResults — setting coverage to 0.'
            $covered = 0.0; $valid = 0.0
          } else {
            $covered = 0.0; $valid = 0.0
            foreach ($f in $files) {
              try {
                [xml]$xml = Get-Content -Raw -Path $f.FullName
                $node = $xml.SelectSingleNode('/coverage')
                if ($null -ne $node) {
                  $lv = [double]($node.Attributes['lines-valid'].Value)
                  $lc = [double]($node.Attributes['lines-covered'].Value)
                  $valid += $lv
                  $covered += $lc
                }
              } catch {
                Write-Warning ("Failed to parse coverage file {0}: {1}" -f $f.FullName, $_.Exception.Message)
              }
            }
          }

          $pct = if ($valid -gt 0) { [math]::Round(($covered / $valid) * 100, 2) } else { 0.0 }
          Write-Host ("Aggregated coverage: {0}% (covered={1} / valid={2})" -f $pct, $covered, $valid)

          # Export outputs for later steps
          echo "coverage=$pct" >> $env:GITHUB_OUTPUT
          echo "coverage-threshold=$threshold" >> $env:GITHUB_OUTPUT
          if ($pct -ge $threshold) { echo "coverage-pass=true" >> $env:GITHUB_OUTPUT } else { echo "coverage-pass=false" >> $env:GITHUB_OUTPUT }

          if ($pct -lt $threshold) {
            Write-Error ("Test coverage {0}% is below threshold {1}%" -f $pct, $threshold)
            exit 1
          }

      - name: � Scan vulnerable dependencies
        shell: pwsh
        run: |
          echo "🔒 Scanning for vulnerable NuGet packages..."
          dotnet list ${{ env.SOLUTION_FILE }} package --vulnerable --include-transitive | Tee-Object -FilePath vulnerability-report.txt

      - name: �📊 Quality metrics analysis
        id: quality-metrics
        run: |
          echo "📊 Analyzing code quality metrics..."

          # Count files and lines
          $csFiles = (Get-ChildItem -Path . -Recurse -Include "*.cs" -Exclude "bin","obj","Migrations","*.g.cs","*.designer.cs" | Measure-Object).Count
          $xamlFiles = (Get-ChildItem -Path . -Recurse -Include "*.xaml" -Exclude "bin","obj" | Measure-Object).Count

          # Analyze test coverage potential
          $testFiles = (Get-ChildItem -Path . -Recurse -Include "*Test*.cs","*Tests.cs" -Exclude "bin","obj" | Measure-Object).Count
          $testCoverage = if ($csFiles -gt 0) { [math]::Round(($testFiles / $csFiles) * 100, 1) } else { 0 }

          # Check for common code quality indicators
          $viewModelFiles = (Get-ChildItem -Path . -Recurse -Include "*ViewModel.cs" -Exclude "bin","obj" | Measure-Object).Count
          $serviceFiles = (Get-ChildItem -Path . -Recurse -Include "*Service.cs" -Exclude "bin","obj" | Measure-Object).Count

          echo "cs-files=$csFiles" >> $env:GITHUB_OUTPUT
          echo "xaml-files=$xamlFiles" >> $env:GITHUB_OUTPUT
          echo "test-files=$testFiles" >> $env:GITHUB_OUTPUT
          echo "test-coverage=$testCoverage" >> $env:GITHUB_OUTPUT
          echo "viewmodel-files=$viewModelFiles" >> $env:GITHUB_OUTPUT
          echo "service-files=$serviceFiles" >> $env:GITHUB_OUTPUT

          echo "📋 Quality Metrics:"
          echo "   📄 C# files: $csFiles"
          echo "   📄 XAML files: $xamlFiles"
          echo "   🧪 Test files: $testFiles"
          echo "   📊 Test ratio: $testCoverage%"
          echo "   🏗️ ViewModels: $viewModelFiles"
          echo "   ⚙️ Services: $serviceFiles"

      - name: ✅ Quality gate evaluation
        id: quality-gate
        run: |
          echo "✅ Evaluating quality gate criteria..."

          $csFiles = [int]"${{ steps.quality-metrics.outputs.cs-files }}"
          $testFiles = [int]"${{ steps.quality-metrics.outputs.test-files }}"
          $testCoverage = [float]"${{ steps.quality-metrics.outputs.test-coverage }}"

          $passed = $true
          $issues = @()

          # Quality gate rules (industry standards)
          if ($csFiles -gt 50 -and $testCoverage -lt 20) {
            $issues += "⚠️ Test coverage ratio below 20% for mature codebase"
            $passed = $false
          }

          if ($csFiles -gt 100 -and $testFiles -eq 0) {
            $issues += "❌ No test files found for large codebase"
            $passed = $false
          }

          echo "quality-gate-passed=$passed" >> $env:GITHUB_OUTPUT

          if ($passed) {
            echo "✅ Quality gate PASSED"
          } else {
            echo "⚠️ Quality gate has recommendations:"
            foreach ($issue in $issues) {
              echo "   $issue"
            }
          }

      - name: 📋 Generate quality report
        if: always()
        run: |
          echo "## 🎯 Code Quality Gate Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| C# Files | ${{ steps.quality-metrics.outputs.cs-files }} | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| XAML Files | ${{ steps.quality-metrics.outputs.xaml-files }} | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Files | ${{ steps.quality-metrics.outputs.test-files }} | 📊 |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Ratio | ${{ steps.quality-metrics.outputs.test-coverage }}% | 📈 |" >> $GITHUB_STEP_SUMMARY
          echo "| Coverage (Cobertura) | ${{ steps.coverage.outputs.coverage }}% (min ${{ steps.coverage.outputs.coverage-threshold }}%) | ${{ steps.coverage.outputs.coverage-pass == 'true' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ViewModels | ${{ steps.quality-metrics.outputs.viewmodel-files }} | 🏗️ |" >> $GITHUB_STEP_SUMMARY
          echo "| Services | ${{ steps.quality-metrics.outputs.service-files }} | ⚙️ |" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Gate | ${{ steps.quality-gate.outputs.quality-gate-passed == 'true' && '✅ PASSED' || '⚠️ RECOMMENDATIONS' }} | 🎯 |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**💡 Recommendation:** Focus on test coverage for critical business logic and ViewModels" >> $GITHUB_STEP_SUMMARY







