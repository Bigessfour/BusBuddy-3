name: 🚌 BusBuddy Reusable Build & Test

# This reusable workflow is compatible with VS Code GitHub Actions extension
# Use 'secrets: inherit' in caller workflows for maximum compatibility
# Fallback approach for VS Code extension limitations

on:
  workflow_call:
    inputs:
      configuration:
        description: 'Build configuration (Debug/Release)'
        default: 'Debug'
        type: string
      run-tests:
        description: 'Whether to run tests'
        default: true
        type: boolean
      upload-artifacts:
        description: 'Whether to upload artifacts on failure'
        default: true
        type: boolean
    # Simplified secrets definition for VS Code compatibility
    secrets:
      SYNC_LICENSE_KEY:
        required: false
      CODECOV_TOKEN:
        required: false
      GITHUB_TOKEN:
        required: false

jobs:
  build:
    name: 🏗️ Build & Test (${{ inputs.configuration }})
    runs-on: windows-latest
    timeout-minutes: 30

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 📦 Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/packages.lock.json', 'Directory.Packages.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: 🧹 Clear NuGet Cache (if needed)
      run: |
        if ("${{ inputs.configuration }}" -eq "Release") {
          Write-Host "🧹 Clearing NuGet cache for clean release build"
          dotnet nuget locals all --clear
        }
      shell: pwsh

    - name: 📦 Restore Dependencies
      run: dotnet restore BusBuddy.sln --force --no-cache --verbosity minimal

    - name: 🏗️ Build Solution
      run: dotnet build BusBuddy.sln --configuration ${{ inputs.configuration }} --no-restore --verbosity minimal

    - name: 🔑 Register Syncfusion License (if provided)
      run: |
        if ("${{ secrets.SYNC_LICENSE_KEY }}" -ne "") {
          Write-Host "🔑 Registering Syncfusion license for CI environment"
          $env:SYNCFUSION_LICENSE_KEY = "${{ secrets.SYNC_LICENSE_KEY }}"
          Write-Host "✅ Syncfusion license environment variable set"
        } else {
          Write-Host "⚠️ Syncfusion license not provided - using community license"
        }
      shell: pwsh
      env:
        SYNCFUSION_LICENSE_KEY: ${{ secrets.SYNC_LICENSE_KEY }}

    - name: 🧪 Run Tests
      if: ${{ inputs.run-tests }}
      run: |
        # Create TestResults directory if it doesn't exist
        New-Item -ItemType Directory -Path "./TestResults" -Force | Out-Null

        # Check if test projects exist
        $testProjects = Get-ChildItem -Path . -Recurse -Include "*.Tests.csproj", "*Test*.csproj" -ErrorAction SilentlyContinue

        if ($testProjects.Count -gt 0) {
          Write-Host "🧪 Found $($testProjects.Count) test projects - running tests"
          dotnet test BusBuddy.sln --configuration ${{ inputs.configuration }} --no-build --verbosity minimal --logger trx --results-directory ./TestResults
          Write-Host "✅ Tests completed"
        } else {
          Write-Host "📝 No test projects found - MVP Phase 1 - tests deferred to Phase 2"
          $trxContent = '<?xml version="1.0" encoding="UTF-8"?><TestRun xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010"><ResultSummary outcome="Completed"><Counters total="0" executed="0" passed="0" failed="0" /></ResultSummary></TestRun>'
          $trxContent | Out-File -FilePath "./TestResults/mvp-phase1-results.trx" -Encoding UTF8
          Write-Host "✅ MVP Phase 1 placeholder test results created"
        }
      shell: pwsh
      continue-on-error: true

    - name: 🏥 Health Check
      run: |
        Write-Host "🏥 Running BusBuddy health check..."

        # Check if check-health.bat exists
        if (Test-Path ".\check-health.bat") {
          Write-Host "🔍 Running check-health.bat"
          cmd /c ".\check-health.bat"
        } elseif (Test-Path ".\run-with-error-capture.bat") {
          Write-Host "🔍 Running error capture health check"
          cmd /c ".\run-with-error-capture.bat"
        } else {
          Write-Host "🔍 Running basic dotnet build health check"
          dotnet build BusBuddy.WPF/BusBuddy.WPF.csproj --configuration ${{ inputs.configuration }} --verbosity quiet
          if ($LASTEXITCODE -eq 0) {
            Write-Host "✅ Basic health check passed - WPF project builds successfully"
          } else {
            Write-Host "❌ Health check failed - WPF project build errors"
            exit 1
          }
        }
      shell: pwsh
      continue-on-error: true

    - name: 📤 Upload Test Results
      if: always() && inputs.run-tests
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ inputs.configuration }}
        path: ./TestResults/
        retention-days: 7
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN || github.token }}

    - name: 📤 Upload Error Logs
      if: failure() && inputs.upload-artifacts
      uses: actions/upload-artifact@v4
      with:
        name: error-logs-${{ inputs.configuration }}
        path: |
          app_errors.log
          **/*.log
          **/logs/**
        retention-days: 7
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN || github.token }}

    - name: 📊 Summary
      if: always()
      run: |
        Write-Host "📊 BusBuddy Build Summary:" -ForegroundColor Cyan
        Write-Host "  Configuration: ${{ inputs.configuration }}" -ForegroundColor Yellow
        Write-Host "  Tests Run: ${{ inputs.run-tests }}" -ForegroundColor Yellow
        Write-Host "  .NET Version: $(dotnet --version)" -ForegroundColor Yellow
        Write-Host "  Build Status: ${{ job.status }}" -ForegroundColor $(if ("${{ job.status }}" -eq "success") { "Green" } else { "Red" })

        # MVP Phase 1 specific validation
        Write-Host "🚌 MVP Phase 1 Validation:" -ForegroundColor Cyan
        if (Test-Path "BusBuddy.WPF/Views/Main/MainWindow.xaml") {
          Write-Host "  ✅ MainWindow exists" -ForegroundColor Green
        } else {
          Write-Host "  ❌ MainWindow missing" -ForegroundColor Red
        }

        $coreViews = @("DriversView", "VehiclesView", "DashboardView")
        foreach ($view in $coreViews) {
          $viewPath = Get-ChildItem -Recurse -Name "*$view.xaml" | Select-Object -First 1
          if ($viewPath) {
            Write-Host "  ✅ $view found: $viewPath" -ForegroundColor Green
          } else {
            Write-Host "  ⚠️ $view not found (may be in development)" -ForegroundColor Yellow
          }
        }
      shell: pwsh
