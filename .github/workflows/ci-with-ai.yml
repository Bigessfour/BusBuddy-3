---
# 🚀 BusBuddy CI with AI Analysis (Grok)
# Documentation-first, compliant with BusBuddy standards:
# - .NET 9.0 (matches solution target)
# - No Write-Host (uses Write-Output / Write-Information / Write-Warning)
# - Uses bb-* commands when available (non-fatal fallback to dotnet)
# - Concurrency to auto-cancel redundant runs per ref
# - AI failure analysis only triggers on failed restore/build/test
# - Removes direct secret echoing into $GITHUB_ENV (reads from injected env only)

name: "🚀 BusBuddy CI with AI Analysis"

concurrency:
  group: busbuddy-ai-ci-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  DOTNET_VERSION: "9.0.x"
  BUSBUDDY_NO_WELCOME: "1"
  BUSBUDDY_NO_XAI_WARN: "1"
  BUSBUDDY_SILENT: "1"
  DOTNET_CLI_TELEMETRY_OPTOUT: "1"
  SOLUTION_FILE: "BusBuddy.sln"
  BUILD_CONFIGURATION: "Release"

jobs:
  build-and-test:
    name: "🏗️ Build & Test with AI Analysis"
    runs-on: windows-latest
    timeout-minutes: 35
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "⚙️ Setup .NET"
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: "🔧 Load BusBuddy PowerShell Profile (if present)"
        shell: pwsh
        run: |
          $profilePath = Join-Path $PWD 'PowerShell/Profiles/Microsoft.PowerShell_profile_optimized.ps1'
          if (Test-Path $profilePath) {
            . $profilePath
            Write-Output "Loaded BusBuddy profile. bb-* commands available:"
            (Get-Command bb-* -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Name) | ForEach-Object { Write-Output "  - $_" }
          } else {
            Write-Warning "BusBuddy optimized profile not found; proceeding without bb-* shortcuts."
          }

      - name: "📦 Cache NuGet Packages"
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: "📦 Restore Dependencies"
        id: restore
        shell: pwsh
        run: |
          if (Get-Command bb-build -ErrorAction SilentlyContinue) {
            Write-Information "Attempting bb-build restore shortcut" -InformationAction Continue
            bb-build --restoreOnly 2>$null || dotnet restore $env:SOLUTION_FILE --verbosity minimal
          } else {
            dotnet restore $env:SOLUTION_FILE --verbosity minimal
          }

      - name: "🏗️ Build"
        id: build
        shell: pwsh
        run: |
          if (Get-Command bb-build -ErrorAction SilentlyContinue) {
            bb-build 2>$null || dotnet build $env:SOLUTION_FILE --configuration $env:BUILD_CONFIGURATION --no-restore --verbosity minimal
          } else {
            dotnet build $env:SOLUTION_FILE --configuration $env:BUILD_CONFIGURATION --no-restore --verbosity minimal
          }

      - name: "🧪 Test"
        id: test
        shell: pwsh
        run: |
          if (Get-Command bb-test -ErrorAction SilentlyContinue) {
            bb-test 2>$null || dotnet test $env:SOLUTION_FILE --configuration $env:BUILD_CONFIGURATION --no-build --logger 'trx' --collect "XPlat Code Coverage" --verbosity minimal
          } else {
            dotnet test $env:SOLUTION_FILE --configuration $env:BUILD_CONFIGURATION --no-build --logger 'trx' --collect "XPlat Code Coverage" --verbosity minimal
          }

      - name: "📤 Upload Test Artifacts"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts
          path: |
            **/TestResults/*.trx
            **/TestResults/**/coverage.cobertura.xml
          retention-days: 14

      - name: "🤖 AI Failure Analysis (Simplified)"
        if: failure()
        shell: pwsh
        run: |
          Write-Output "Starting simplified AI failure analysis..."
          $analysisModule = Join-Path $PWD 'PowerShell/Modules/BusBuddy-CIAnalysis-Enhanced.psm1'
          if (Test-Path $analysisModule) { Import-Module $analysisModule -Force } else { Write-Warning "Analysis module not found." }
          $azureModule = Join-Path $PWD 'PowerShell/Modules/BusBuddy-GrokAzureSQL.psm1'
          if (Test-Path $azureModule) {
            Import-Module $azureModule -Force
            try { if ($env:AZURE_SQL_SERVER) { grok-sql-init -ServerName $env:AZURE_SQL_SERVER } } catch { Write-Warning "Azure SQL init failed: $($_.Exception.Message)" }
          }
          $errorMessage = 'Pipeline failure detected (phase granularity suppressed).'
          try {
            if (Get-Command Invoke-EnhancedCIAnalysis -ErrorAction SilentlyContinue) {
              $result = Invoke-EnhancedCIAnalysis -ErrorMessage $errorMessage -WorkflowName 'ci-with-ai.yml'
              if ($result) {
                Write-Output "Severity: $($result.Severity)"
                Write-Output "Summary: $($result.Summary)"
                if ($result.Insights) { Write-Output 'Insights:'; $result.Insights | ForEach-Object { Write-Output "  - $_" } }
                if ($result.Recommendations) { Write-Output 'Recommendations:'; $result.Recommendations | ForEach-Object { Write-Output "  - $_" } }
              } else { Write-Warning "AI analysis returned null result." }
            } else { Write-Warning "Invoke-EnhancedCIAnalysis unavailable." }
          } catch { Write-Warning "AI analysis failed: $($_.Exception.Message)" }
          Write-Output "AI failure analysis step complete."

# Security best practices for secrets:
# 1. XAI_API_KEY - Your xAI API key for Grok-4 access
# 2. AZURE_SQL_SERVER - Your Azure SQL server name (without .database.windows.net)
# 3. AZURE_CLIENT_ID - Service principal client ID for Azure authentication
# 4. AZURE_CLIENT_SECRET - Service principal secret
# 5. AZURE_TENANT_ID - Azure AD tenant ID
#
# Add these secrets in your GitHub repository settings under:
# Settings > Secrets and variables > Actions > Repository secrets
