name: 🎯 Code Quality Gate

on:
  pull_request:
    branches: [main, master, develop]
  workflow_dispatch:
    inputs:
      full_analysis:
        description: 'Run full code analysis'
        type: boolean
        default: false

env:
  DOTNET_VERSION: "9.0.x"
  SOLUTION_FILE: "BusBuddy.sln"

jobs:
  quality-analysis:
    name: 🔍 Quality Analysis
    runs-on: windows-latest
    timeout-minutes: 30

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Enable GitVersion

      - name: 🏗️ Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 🔧 Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_FILE }}

      - name: 🏗️ Build solution
        run: dotnet build ${{ env.SOLUTION_FILE }} --no-restore --configuration Release

      - name: 🧪 Run tests with coverage
        run: |
          # Create TestResults directory if it doesn't exist
          New-Item -ItemType Directory -Path "./TestResults" -Force | Out-Null

          # Check if test projects exist
          $testProjects = Get-ChildItem -Path . -Recurse -Include "*.Tests.csproj", "*Test*.csproj" -ErrorAction SilentlyContinue

          if ($testProjects.Count -gt 0) {
            Write-Host "🧪 Running tests with coverage collection..."
            dotnet test ${{ env.SOLUTION_FILE }} --no-build --configuration Release --collect:"XPlat Code Coverage" --results-directory ./TestResults --logger trx
          } else {
            Write-Host "📝 No test projects found - creating placeholder for workflow compatibility"
            $trxContent = '<?xml version="1.0" encoding="UTF-8"?><TestRun xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010"><ResultSummary outcome="Completed"><Counters total="0" executed="0" passed="0" failed="0" /></ResultSummary></TestRun>'
            $trxContent | Out-File -FilePath "./TestResults/placeholder-results.trx" -Encoding UTF8
          }
        shell: pwsh
        continue-on-error: true

      - name: 📊 Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: 📋 Test Results
          path: './TestResults/**/*.trx'
          reporter: dotnet-trx
          fail-on-error: false

      - name: 📊 Quality metrics analysis
        id: quality-metrics
        shell: pwsh
        run: |
          echo "📊 Analyzing code quality metrics..."

          # Count files and lines
          $csFiles = (Get-ChildItem -Path . -Recurse -Include "*.cs" -Exclude "bin","obj","Migrations","*.g.cs","*.designer.cs" | Measure-Object).Count
          $xamlFiles = (Get-ChildItem -Path . -Recurse -Include "*.xaml" -Exclude "bin","obj" | Measure-Object).Count
          $testFiles = (Get-ChildItem -Path . -Recurse -Include "*Test*.cs","*Tests.cs" -Exclude "bin","obj" | Measure-Object).Count
          $viewModelFiles = (Get-ChildItem -Path . -Recurse -Include "*ViewModel.cs" -Exclude "bin","obj" | Measure-Object).Count
          $serviceFiles = (Get-ChildItem -Path . -Recurse -Include "*Service.cs" -Exclude "bin","obj" | Measure-Object).Count

          # Calculate code metrics
          $testCoverage = if ($csFiles -gt 0) { [math]::Round(($testFiles / $csFiles) * 100, 1) } else { 0 }

          # Check XML/JSON file validity
          $xmlFiles = Get-ChildItem -Recurse -Filter "*.xml" | Where-Object {
            $_.FullName -notlike "*bin*" -and
            $_.FullName -notlike "*obj*" -and
            $_.FullName -notlike "*packages*"
          }

          $jsonFiles = Get-ChildItem -Recurse -Filter "*.json" | Where-Object {
            $_.FullName -notlike "*node_modules*" -and
            $_.FullName -notlike "*bin*" -and
            $_.FullName -notlike "*obj*"
          }

          $xmlInvalid = 0
          $jsonInvalid = 0

          foreach ($file in $xmlFiles) {
            try {
              [xml](Get-Content $file.FullName) | Out-Null
            } catch {
              $xmlInvalid++
            }
          }

          foreach ($file in $jsonFiles) {
            try {
              Get-Content $file.FullName -Raw | ConvertFrom-Json | Out-Null
            } catch {
              $jsonInvalid++
            }
          }

          # Output metrics
          echo "cs-files=$csFiles" >> $env:GITHUB_OUTPUT
          echo "xaml-files=$xamlFiles" >> $env:GITHUB_OUTPUT
          echo "test-files=$testFiles" >> $env:GITHUB_OUTPUT
          echo "test-coverage=$testCoverage" >> $env:GITHUB_OUTPUT
          echo "viewmodel-files=$viewModelFiles" >> $env:GITHUB_OUTPUT
          echo "service-files=$serviceFiles" >> $env:GITHUB_OUTPUT
          echo "xml-invalid=$xmlInvalid" >> $env:GITHUB_OUTPUT
          echo "json-invalid=$jsonInvalid" >> $env:GITHUB_OUTPUT

          echo "📋 Quality Metrics:"
          echo "   📄 C# files: $csFiles"
          echo "   📄 XAML files: $xamlFiles"
          echo "   🧪 Test files: $testFiles"
          echo "   📊 Test ratio: $testCoverage%"
          echo "   🏗️ ViewModels: $viewModelFiles"
          echo "   ⚙️ Services: $serviceFiles"
          echo "   📝 Invalid XML files: $xmlInvalid"
          echo "   📝 Invalid JSON files: $jsonInvalid"

      - name: ✅ Quality gate evaluation
        id: quality-gate
        shell: pwsh
        run: |
          echo "✅ Evaluating quality gate criteria..."

          $csFiles = [int]"${{ steps.quality-metrics.outputs.cs-files }}"
          $testFiles = [int]"${{ steps.quality-metrics.outputs.test-files }}"
          $testCoverage = [float]"${{ steps.quality-metrics.outputs.test-coverage }}"
          $xmlInvalid = [int]"${{ steps.quality-metrics.outputs.xml-invalid }}"
          $jsonInvalid = [int]"${{ steps.quality-metrics.outputs.json-invalid }}"

          $passed = $true
          $issues = @()

          # Quality gate rules
          if ($xmlInvalid -gt 0) {
            $issues += "❌ Found $xmlInvalid invalid XML files"
            $passed = $false
          }

          if ($jsonInvalid -gt 0) {
            $issues += "❌ Found $jsonInvalid invalid JSON files"
            $passed = $false
          }

          if ($csFiles -gt 50 -and $testCoverage -lt 20) {
            $issues += "⚠️ Test coverage ratio below 20% for mature codebase"
            # Only warn, don't fail
          }

          if ($csFiles -gt 100 -and $testFiles -eq 0) {
            $issues += "⚠️ No test files found for large codebase"
            # Only warn, don't fail
          }

          echo "quality-gate-passed=$passed" >> $env:GITHUB_OUTPUT
          echo "issues-found=$($issues.Count)" >> $env:GITHUB_OUTPUT

          if ($passed) {
            echo "✅ Quality gate PASSED"
          } else {
            echo "❌ Quality gate FAILED with the following issues:"
            foreach ($issue in $issues) {
              echo "   $issue"
            }
          }

      - name: 🔒 Security scan
        id: security-scan
        shell: pwsh
        run: |
          echo "🔒 Running security scan..."

          # Scan for vulnerable dependencies
          dotnet list package --vulnerable --include-transitive > vulnerability-report.txt 2>&1
          $vulnerableCount = (Select-String -Path vulnerability-report.txt -Pattern "has the following vulnerable packages" | Measure-Object).Count

          # Scan for potential secrets
          $patterns = @(
            'password\s*=\s*"[^"]*"',
            'api[_-]?key\s*=\s*"[^"]*"',
            'secret\s*=\s*"[^"]*"',
            'token\s*=\s*"[^"]*"',
            'connection[_-]?string\s*=\s*"[^"]*"'
          )

          $secretIssues = @()
          $files = Get-ChildItem -Recurse -Include "*.cs","*.json","*.xml","*.config" | Where-Object {
            $_.FullName -notlike "*bin*" -and
            $_.FullName -notlike "*obj*"
          }

          foreach ($file in $files) {
            $content = Get-Content $file.FullName -Raw
            foreach ($pattern in $patterns) {
              if ($content -match $pattern) {
                $secretIssues += "⚠️ Potential secret in $($file.Name)"
              }
            }
          }

          echo "vulnerable-packages=$vulnerableCount" >> $env:GITHUB_OUTPUT
          echo "potential-secrets=$($secretIssues.Count)" >> $env:GITHUB_OUTPUT

          echo "🔒 Security Scan Results:"
          echo "   ⚠️ Vulnerable packages: $vulnerableCount"
          echo "   ⚠️ Potential secrets: $($secretIssues.Count)"

          if ($secretIssues.Count -gt 0) {
            echo "⚠️ Potential security issues found:"
            $secretIssues | ForEach-Object { echo "   $_" }
          }

      - name: 📊 Repository size analysis
        id: repo-size
        shell: pwsh
        run: |
          echo "📊 Analyzing repository size..."

          $totalSize = (Get-ChildItem -Recurse | Measure-Object -Property Length -Sum).Sum
          $sizeMB = [math]::Round($totalSize / 1MB, 2)

          # Find large files
          $largeFiles = Get-ChildItem -Recurse | Where-Object {
            $_.Length -gt 10MB -and -not $_.PSIsContainer
          } | Sort-Object Length -Descending | Select-Object -First 5

          $largeFilesCount = $largeFiles.Count

          echo "repo-size-mb=$sizeMB" >> $env:GITHUB_OUTPUT
          echo "large-files-count=$largeFilesCount" >> $env:GITHUB_OUTPUT

          echo "📊 Repository Size: $sizeMB MB"

          if ($largeFilesCount -gt 0) {
            echo "⚠️ Found $largeFilesCount large files (>10MB):"
            foreach ($file in $largeFiles) {
              $fileSizeMB = [math]::Round($_.Length / 1MB, 2)
              echo "   📁 $($file.FullName.Replace($PWD, '.')) - $fileSizeMB MB"
            }
          }

      - name: 📋 Generate comprehensive quality report
        if: always()
        shell: pwsh
        run: |
          echo "## 🎯 Comprehensive Quality Gate Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Code Metrics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| C# Files | ${{ steps.quality-metrics.outputs.cs-files }} | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| XAML Files | ${{ steps.quality-metrics.outputs.xaml-files }} | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Files | ${{ steps.quality-metrics.outputs.test-files }} | 📊 |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Ratio | ${{ steps.quality-metrics.outputs.test-coverage }}% | 📈 |" >> $GITHUB_STEP_SUMMARY
          echo "| ViewModels | ${{ steps.quality-metrics.outputs.viewmodel-files }} | 🏗️ |" >> $GITHUB_STEP_SUMMARY
          echo "| Services | ${{ steps.quality-metrics.outputs.service-files }} | ⚙️ |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 🔒 Security Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Vulnerable Packages | ${{ steps.security-scan.outputs.vulnerable-packages }} | ${{ steps.security-scan.outputs.vulnerable-packages == '0' && '✅' || '⚠️' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Potential Secrets | ${{ steps.security-scan.outputs.potential-secrets }} | ${{ steps.security-scan.outputs.potential-secrets == '0' && '✅' || '⚠️' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 📁 Repository Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Repository Size | ${{ steps.repo-size.outputs.repo-size-mb }} MB | ${{ steps.repo-size.outputs.repo-size-mb < 300 && '✅' || '⚠️' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Large Files (>10MB) | ${{ steps.repo-size.outputs.large-files-count }} | ${{ steps.repo-size.outputs.large-files-count == '0' && '✅' || '⚠️' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Invalid XML Files | ${{ steps.quality-metrics.outputs.xml-invalid }} | ${{ steps.quality-metrics.outputs.xml-invalid == '0' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Invalid JSON Files | ${{ steps.quality-metrics.outputs.json-invalid }} | ${{ steps.quality-metrics.outputs.json-invalid == '0' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### ✅ Quality Gate Result" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Gate | Status | Issues |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Overall Result | ${{ steps.quality-gate.outputs.quality-gate-passed == 'true' && '✅ PASSED' || '❌ FAILED' }} | ${{ steps.quality-gate.outputs.issues-found }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**💡 Recommendation:** Focus on test coverage for critical business logic and ViewModels" >> $GITHUB_STEP_SUMMARY

          if (${{ steps.quality-gate.outputs.quality-gate-passed != 'true' }}) {
            echo "**❌ Action Required:** Fix quality gate issues before merging" >> $GITHUB_STEP_SUMMARY
          }


