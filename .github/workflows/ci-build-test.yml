name: 🚀 CI/CD - Build, Test & Standards Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    name: 🏗️ Build & Test
    runs-on: windows-latest
    timeout-minutes: 30

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: 📦 Restore Dependencies
      run: dotnet restore BusBuddy.sln

    - name: 🏗️ Build Solution
      run: dotnet build BusBuddy.sln --configuration Release --no-restore --verbosity minimal

    - name: 🧪 Run Tests
      run: |
        # Create TestResults directory if it doesn't exist
        New-Item -ItemType Directory -Path "./TestResults" -Force | Out-Null

        # Check if test projects exist
        $testProjects = Get-ChildItem -Path . -Recurse -Include "*.Tests.csproj", "*Test*.csproj" -ErrorAction SilentlyContinue

        if ($testProjects.Count -gt 0) {
          Write-Host "🧪 Found $($testProjects.Count) test projects - running tests with coverage"
          dotnet test BusBuddy.sln --configuration Release --no-build --verbosity minimal --logger trx --results-directory ./TestResults
        } else {
          Write-Host "📝 No test projects found - creating placeholder results for workflow compatibility"
          $trxContent = '<?xml version="1.0" encoding="UTF-8"?><TestRun xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010"><ResultSummary outcome="Completed"><Counters total="0" executed="0" passed="0" failed="0" /></ResultSummary></TestRun>'
          $trxContent | Out-File -FilePath "./TestResults/placeholder-results.trx" -Encoding UTF8
          Write-Host "✅ Placeholder test results created"
        }
      shell: pwsh
      continue-on-error: true

    - name: 📊 Test Results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: 📋 .NET Test Results
        path: './TestResults/**/*.trx'
        reporter: dotnet-trx
        fail-on-error: false

  standards-validation:
    name: 📚 Standards Validation
    runs-on: windows-latest
    timeout-minutes: 30

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Setup PowerShell
      shell: pwsh
      run: |
        Write-Host "✅ PowerShell Core Version: $($PSVersionTable.PSVersion)" -ForegroundColor Green

    - name: 📋 Validate Standards Directory
      shell: pwsh
      run: |
        Write-Host "🔍 Validating Standards Directory Structure..." -ForegroundColor Cyan

        $requiredFiles = @(
          "Standards/MASTER-STANDARDS.md",
          "Standards/IMPLEMENTATION-REPORT.md",
          "Standards/LANGUAGE-INVENTORY.md",
          "Standards/Languages/JSON-STANDARDS.md",
          "Standards/Languages/XML-STANDARDS.md",
          "Standards/Languages/YAML-STANDARDS.md"
        )

        $missing = @()
        foreach ($file in $requiredFiles) {
          if (-not (Test-Path $file)) {
            $missing += $file
          } else {
            Write-Host "✅ Found: $file" -ForegroundColor Green
          }
        }

        if ($missing.Count -gt 0) {
          Write-Host "❌ Missing required standards files:" -ForegroundColor Red
          $missing | ForEach-Object { Write-Host "  - $_" -ForegroundColor Red }
          exit 1
        }

        Write-Host "🎉 All required standards files present!" -ForegroundColor Green

    - name: 🔬 JSON Standards Validation
      shell: pwsh
      run: |
        Write-Host "🔍 Validating JSON files against standards..." -ForegroundColor Cyan

        $jsonFiles = Get-ChildItem -Recurse -Filter "*.json" | Where-Object {
          $_.FullName -notlike "*node_modules*" -and
          $_.FullName -notlike "*bin*" -and
          $_.FullName -notlike "*obj*"
        }

        $errors = @()
        foreach ($file in $jsonFiles) {
          try {
            $content = Get-Content $file.FullName -Raw
            $parsed = $content | ConvertFrom-Json
            Write-Host "✅ Valid JSON: $($file.Name)" -ForegroundColor Green
          } catch {
            $errors += "❌ Invalid JSON: $($file.FullName) - $($_.Exception.Message)"
          }
        }

        if ($errors.Count -gt 0) {
          Write-Host "❌ JSON Validation Errors:" -ForegroundColor Red
          $errors | ForEach-Object { Write-Host "  $_" -ForegroundColor Red }
          exit 1
        }

        Write-Host "🎉 All JSON files are valid!" -ForegroundColor Green

    - name: 🔬 XML Standards Validation
      shell: pwsh
      run: |
        Write-Host "🔍 Validating XML files against standards..." -ForegroundColor Cyan

        $xmlFiles = Get-ChildItem -Recurse -Filter "*.xml" | Where-Object {
          $_.FullName -notlike "*bin*" -and
          $_.FullName -notlike "*obj*" -and
          $_.FullName -notlike "*packages*"
        }

        $errors = @()
        foreach ($file in $xmlFiles) {
          try {
            $xml = [xml](Get-Content $file.FullName)
            Write-Host "✅ Valid XML: $($file.Name)" -ForegroundColor Green
          } catch {
            $errors += "❌ Invalid XML: $($file.FullName) - $($_.Exception.Message)"
          }
        }

        if ($errors.Count -gt 0) {
          Write-Host "❌ XML Validation Errors:" -ForegroundColor Red
          $errors | ForEach-Object { Write-Host "  $_" -ForegroundColor Red }
          exit 1
        }

        Write-Host "🎉 All XML files are valid!" -ForegroundColor Green

    - name: 🔬 C# Code Standards Check
      shell: pwsh
      run: |
        Write-Host "🔍 Checking C# code standards..." -ForegroundColor Cyan

        # Check for basic C# standards compliance
        $csFiles = Get-ChildItem -Recurse -Filter "*.cs" | Where-Object {
          $_.FullName -notlike "*bin*" -and
          $_.FullName -notlike "*obj*"
        }

        $issues = @()
        foreach ($file in $csFiles) {
          $content = Get-Content $file.FullName -Raw

          # Check for basic standards
          if ($content -match "Console\.WriteLine" -and $file.Name -notlike "*Program.cs") {
            $issues += "⚠️ Found Console.WriteLine in $($file.Name) - Should use ILogger"
          }

          if ($content -match "using System\.Threading\.Tasks;" -and $content -notmatch "async|await") {
            # This is just a warning, not an error
          }
        }

        if ($issues.Count -gt 0) {
          Write-Host "⚠️ C# Standards Recommendations:" -ForegroundColor Yellow
          $issues | ForEach-Object { Write-Host "  $_" -ForegroundColor Yellow }
        }

        Write-Host "✅ C# standards check completed" -ForegroundColor Green

  repository-health:
    name: 🏥 Repository Health Check
    runs-on: windows-latest
    timeout-minutes: 30

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 📊 Repository Size Analysis
      shell: pwsh
      run: |
        Write-Host "🔍 Analyzing repository size..." -ForegroundColor Cyan

        $totalSize = (Get-ChildItem -Recurse | Measure-Object -Property Length -Sum).Sum
        $sizeMB = [math]::Round($totalSize / 1MB, 2)

        Write-Host "📊 Repository Size: $sizeMB MB" -ForegroundColor Cyan

        # Check for large files
        $largeFiles = Get-ChildItem -Recurse | Where-Object {
          $_.Length -gt 10MB -and -not $_.PSIsContainer
        } | Sort-Object Length -Descending | Select-Object -First 10

        if ($largeFiles) {
          Write-Host "⚠️ Large files found (>10MB):" -ForegroundColor Yellow
          $largeFiles | ForEach-Object {
            $fileSizeMB = [math]::Round($_.Length / 1MB, 2)
            Write-Host "  📁 $($_.FullName.Replace($PWD, '.')) - $fileSizeMB MB" -ForegroundColor Yellow
          }
        }

        # Check logs directory
        if (Test-Path "logs") {
          $logsSize = (Get-ChildItem -Path "logs" -Recurse | Measure-Object -Property Length -Sum).Sum
          $logsSizeMB = [math]::Round($logsSize / 1MB, 2)
          Write-Host "📝 Logs directory size: $logsSizeMB MB" -ForegroundColor Cyan

          if ($logsSizeMB -gt 50) {
            Write-Host "⚠️ Logs directory is large (>50MB) - consider cleanup" -ForegroundColor Yellow
          }
        }

        # Size warnings
        if ($sizeMB -gt 500) {
          Write-Host "⚠️ Repository size exceeds 500MB - optimization recommended" -ForegroundColor Yellow
          exit 1
        } elseif ($sizeMB -gt 300) {
          Write-Host "⚠️ Repository size exceeds 300MB - monitoring recommended" -ForegroundColor Yellow
        } else {
          Write-Host "✅ Repository size is within acceptable limits" -ForegroundColor Green
        }

  security-scan:
    name: 🔒 Security Scan
    runs-on: windows-latest
    timeout-minutes: 30

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: 🔒 Security Vulnerability Scan
      run: dotnet list package --vulnerable --include-transitive
      continue-on-error: true

    - name: 🔍 Secrets Detection
      shell: pwsh
      run: |
        Write-Host "🔍 Scanning for potential secrets..." -ForegroundColor Cyan

        $patterns = @(
          'password\s*=\s*"[^"]*"',
          'api[_-]?key\s*=\s*"[^"]*"',
          'secret\s*=\s*"[^"]*"',
          'token\s*=\s*"[^"]*"',
          'connection[_-]?string\s*=\s*"[^"]*"'
        )

        $issues = @()
        $files = Get-ChildItem -Recurse -Include "*.cs","*.json","*.xml","*.config" | Where-Object {
          $_.FullName -notlike "*bin*" -and
          $_.FullName -notlike "*obj*"
        }

        foreach ($file in $files) {
          $content = Get-Content $file.FullName -Raw
          foreach ($pattern in $patterns) {
            if ($content -match $pattern) {
              $issues += "⚠️ Potential secret in $($file.Name)"
            }
          }
        }

        if ($issues.Count -gt 0) {
          Write-Host "⚠️ Potential security issues found:" -ForegroundColor Yellow
          $issues | ForEach-Object { Write-Host "  $_" -ForegroundColor Yellow }
        } else {
          Write-Host "✅ No obvious secrets detected" -ForegroundColor Green
        }

  notify-completion:
    name: 📢 Workflow Completion
    runs-on: windows-latest
    timeout-minutes: 30
    needs: [build-and-test, standards-validation, repository-health, security-scan]
    if: always()

    steps:
    - name: 📊 Workflow Summary
      shell: pwsh
      run: |
        Write-Host "🎉 CI/CD Workflow Completed!" -ForegroundColor Green
        Write-Host "📊 Job Status Summary:" -ForegroundColor Cyan
        Write-Host "  🏗️ Build & Test: ${{ needs.build-and-test.result }}" -ForegroundColor $(if ('${{ needs.build-and-test.result }}' -eq 'success') { 'Green' } else { 'Red' })
        Write-Host "  📚 Standards: ${{ needs.standards-validation.result }}" -ForegroundColor $(if ('${{ needs.standards-validation.result }}' -eq 'success') { 'Green' } else { 'Red' })
        Write-Host "  🏥 Repository: ${{ needs.repository-health.result }}" -ForegroundColor $(if ('${{ needs.repository-health.result }}' -eq 'success') { 'Green' } else { 'Red' })
        Write-Host "  🔒 Security: ${{ needs.security-scan.result }}" -ForegroundColor $(if ('${{ needs.security-scan.result }}' -eq 'success') { 'Green' } else { 'Red' })







