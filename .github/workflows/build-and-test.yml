name: üöå Bus Buddy CI/CD Pipeline

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: "Enable debug mode for troubleshooting"
        default: false

env:
  DOTNET_VERSION: "9.0.x"
  SOLUTION_FILE: "BusBuddy.sln"
  BUILD_CONFIGURATION: "Release"

jobs:
  build-and-test:
    runs-on: windows-latest
    timeout-minutes: 45
    strategy:
      matrix:
        platform: [x64, x86]
      fail-fast: false

    outputs:
      build-success: ${{ steps.build-step.outcome == 'success' }}
      test-success: ${{ steps.test-step.outcome == 'success' }}
      coverage-percentage: ${{ steps.coverage-step.outputs.coverage || '0' }}
      build-time: ${{ steps.timing.outputs.build-time || '0' }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Enable GitVersion and better diff analysis

      - name: ‚è±Ô∏è Start timing
        id: timing
        run: |
          echo "start-time=$(date -u +%s)" >> $GITHUB_OUTPUT
          echo "üïê Workflow started at $(Get-Date)"

      - name: üèóÔ∏è Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: üì¶ Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.nuget/packages
            ${{ github.workspace }}/**/obj/project.assets.json
            ${{ github.workspace }}/**/obj/*.csproj.nuget.*
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: üîß Restore dependencies
        run: |
          echo "üîÑ Restoring NuGet packages..."
          dotnet restore ${{ env.SOLUTION_FILE }} --verbosity normal
          echo "‚úÖ Package restoration completed"

      - name: üèóÔ∏è Build solution
        id: build-step
        run: |
          echo "üî® Building Bus Buddy solution for ${{ matrix.platform }}..."
          dotnet build ${{ env.SOLUTION_FILE }} --no-restore --configuration ${{ env.BUILD_CONFIGURATION }} --verbosity normal
          echo "‚úÖ Build completed successfully"

      - name: üß™ Comprehensive Testing Platform
        id: test-step
        run: |
          echo "üß™ GitHub Actions Testing Platform - Comprehensive Analysis..."

          # Create TestResults directory if it doesn't exist
          mkdir -Force ./TestResults 2>$null

          # Check if test projects exist
          $testProjects = Get-ChildItem -Path . -Recurse -Include "*.Tests.csproj", "*Test*.csproj" -ErrorAction SilentlyContinue

          if ($testProjects.Count -gt 0) {
            echo "üìã Found $($testProjects.Count) test projects:"
            foreach ($project in $testProjects) {
              echo "   - $($project.Name)"
            }

            echo "üöÄ Running all tests with coverage collection..."
            dotnet test ${{ env.SOLUTION_FILE }} --no-build --configuration ${{ env.BUILD_CONFIGURATION }} --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./TestResults --logger trx

            echo "‚úÖ Tests completed with coverage data"
          } else {
            echo "üìù No test projects found yet - creating minimal test result for workflow"
            echo "This is normal for early development phase"

            # Create a minimal valid TRX file (single-line echo to avoid YAML issues)
            echo '<?xml version="1.0" encoding="UTF-8"?><TestRun xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010"><ResultSummary outcome="Completed"><Counters total="0" executed="0" passed="0" failed="0" /></ResultSummary></TestRun>' > ./TestResults/placeholder-results.trx

            echo "üìã Created placeholder test results for workflow compatibility"
            echo "üí° Ready for comprehensive testing when test projects are added"
          }

          # Analyze codebase for testing opportunities
          $csFiles = (Get-ChildItem -Path . -Recurse -Include "*.cs" -Exclude "bin","obj","Migrations" | Measure-Object).Count
          $xamlFiles = (Get-ChildItem -Path . -Recurse -Include "*.xaml" -Exclude "bin","obj" | Measure-Object).Count

          echo " GitHub Actions Testing Platform Analysis:"
          echo "   - C# files: $csFiles"
          echo "   - XAML files: $xamlFiles"
          echo "   - Test coverage opportunity: High"
          echo "   - Recommended: Add unit tests for ViewModels, Services, and Core logic"

      - name: üìä Generate coverage report
        id: coverage-step
        run: |
          echo "üìä Generating coverage reports..."

          # Find coverage files
          $coverageFiles = Get-ChildItem -Path "./TestResults" -Filter "coverage.cobertura.xml" -Recurse

          if ($coverageFiles.Count -gt 0) {
            # Extract coverage percentage (simplified - you might want more sophisticated parsing)
            $coverageFile = $coverageFiles[0].FullName
            [xml]$coverage = Get-Content $coverageFile
            $lineRate = [double]$coverage.coverage.'line-rate'
            $coveragePercent = [math]::Round($lineRate * 100, 2)

            echo "coverage=$coveragePercent" >> $env:GITHUB_OUTPUT
            echo "‚úÖ Coverage: $coveragePercent%"
          } else {
            echo "coverage=0" >> $env:GITHUB_OUTPUT
            echo "‚ö†Ô∏è No coverage files found"
          }

      - name: üì¶ Publish WPF application
        if: success() && github.event_name != 'pull_request'
        run: |
          echo "üì¶ Publishing WPF application for ${{ matrix.platform }}..."
          dotnet publish BusBuddy.WPF/BusBuddy.WPF.csproj --configuration ${{ env.BUILD_CONFIGURATION }} --no-build --output ./publish-${{ matrix.platform }} --runtime win-${{ matrix.platform }}

      - name: ‚òÅÔ∏è Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        if: always() && !cancelled()
        with:
          files: "**/coverage.cobertura.xml"
          fail_ci_if_error: false
          verbose: true
          # Note: VS Code may show a warning about CODECOV_TOKEN context access
          # This is a false positive - the secret exists and the syntax is correct
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittests
          name: codecov-umbrella
          directory: ./TestResults
        continue-on-error: true

      - name: üìä Coverage upload summary
        if: always()
        run: |
          echo "üìä Code coverage reports have been generated and uploaded to Codecov."
          echo "üí° Codecov Integration Status:"
          echo "   ‚úÖ codecov.yml configuration file created"
          echo "   ‚úÖ GitHub Actions workflow updated with proper token usage"
          echo "   ‚úÖ Coverage collection configured with XPlat Code Coverage"
          echo ""
          echo "üîß Setup verification:"
          echo "   1. Ensure CODECOV_TOKEN secret is set in GitHub repository settings"
          echo "   2. Visit https://app.codecov.io/gh/Bigessfour/BusBuddy-WPF for coverage reports"
          echo "   3. Check that coverage reports are being uploaded successfully"
          echo ""
          echo "üìÅ Coverage files location: ./TestResults/**/coverage.cobertura.xml"

          # List actual coverage files found
          $coverageFiles = Get-ChildItem -Path "./TestResults" -Filter "*.xml" -Recurse -ErrorAction SilentlyContinue
          if ($coverageFiles.Count -gt 0) {
            echo "üìã Found coverage files:"
            foreach ($file in $coverageFiles) {
              echo "   - $($file.FullName)"
            }
          } else {
            echo "‚ö†Ô∏è No coverage files found in TestResults directory"
          }

      - name: üìä Publish test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: "GitHub Actions Testing Platform Results (${{ matrix.platform }})"
          path: "**/TestResults/*.trx"
          reporter: "dotnet-trx"
          fail-on-error: false
          only-summary: false

      - name: üì¶ Archive build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-artifacts-${{ matrix.platform }}-${{ github.run_number }}
          path: |
            **/bin/Release/
            **/TestResults/
            publish-${{ matrix.platform }}/
            **/*.log
          retention-days: 7

      - name: üì¶ Archive test artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-failure-logs-${{ matrix.platform }}-${{ github.run_number }}
          path: |
            **/logs/
            **/TestResults/
            **/*.trx
          retention-days: 14

      - name: ‚è±Ô∏è Calculate build time
        if: always()
        run: |
          $startTime = "${{ steps.timing.outputs.start-time || '0' }}"
          $endTime = [int][double]::Parse((Get-Date -UFormat %s))
          if ($startTime -ne "0") {
            $buildTime = $endTime - [int]$startTime
          } else {
            $buildTime = 0
          }
          echo "build-time=$buildTime" >> $env:GITHUB_OUTPUT
          echo "üïê Total build time: ${buildTime} seconds"

      - name: üìù Create build summary
        if: always()
        run: |
          echo "## üß™ GitHub Actions Testing Platform Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**üéØ Mission:** Comprehensive testing and validation platform for BusBuddy development" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Platform | ${{ matrix.platform }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Status | ${{ steps.build-step.outcome == 'success' && '‚úÖ Success' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Testing Platform | ${{ steps.test-step.outcome == 'success' && '‚úÖ Active' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Coverage | ${{ steps.coverage-step.outputs.coverage || '0' }}% |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Time | ${{ steps.timing.outputs.build-time || '0' }}s |" >> $GITHUB_STEP_SUMMARY
          echo "| Configuration | ${{ env.BUILD_CONFIGURATION }} |" >> $GITHUB_STEP_SUMMARY
          echo "| .NET Version | ${{ env.DOTNET_VERSION }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**üí° Development Focus:** Keep coding locally, let GitHub Actions handle comprehensive testing!" >> $GITHUB_STEP_SUMMARY

  # Security scanning job
  security-scan:
    runs-on: windows-latest
    if: github.event_name == 'push'
    needs: build-and-test

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîç Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: csharp

      - name: üèóÔ∏è Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: üì¶ Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.nuget/packages
            ${{ github.workspace }}/**/obj/project.assets.json
            ${{ github.workspace }}/**/obj/*.csproj.nuget.*
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: üîß Restore and build for analysis
        run: |
          echo "üîß Restoring packages for security analysis..."
          dotnet restore ${{ env.SOLUTION_FILE }}
          echo "üî® Building for CodeQL analysis..."
          dotnet build ${{ env.SOLUTION_FILE }} --no-restore --configuration Release

      - name: üîç Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Dependency vulnerability scanning
  dependency-scan:
    runs-on: windows-latest
    if: github.event_name == 'push'
    needs: build-and-test

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üèóÔ∏è Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: üîç Run dependency vulnerability scan
        id: vuln-scan
        run: |
          echo "üîç Scanning for vulnerable dependencies..."
          dotnet list package --vulnerable --include-transitive > vulnerability-report.txt 2>&1
          $vulnerableCount = (Select-String -Path vulnerability-report.txt -Pattern "has the following vulnerable packages" | Measure-Object).Count

          if ($vulnerableCount -gt 0) {
            echo "‚ö†Ô∏è Found $vulnerableCount vulnerable packages:"
            Get-Content vulnerability-report.txt
            echo "vulnerable-packages=$vulnerableCount" >> $env:GITHUB_OUTPUT
          } else {
            echo "‚úÖ No vulnerable packages found"
            echo "vulnerable-packages=0" >> $env:GITHUB_OUTPUT
          }

      - name: üì¶ Upload vulnerability report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: vulnerability-report-${{ github.run_number }}
          path: vulnerability-report.txt
          retention-days: 30

      - name: üìä Create security summary
        if: always()
        run: |
          echo "## üîí Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL Analysis | ‚úÖ Completed |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ‚úÖ Completed |" >> $GITHUB_STEP_SUMMARY
          echo "| Vulnerable Packages | ${{ steps.vuln-scan.outputs.vulnerable-packages || '0' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Vulnerable Packages | ${{ steps.vuln-scan.outputs.vulnerable-packages || '0' }} |" >> $GITHUB_STEP_SUMMARY





