name: üóÑÔ∏è Database Migrations & Seeding

on:
  workflow_dispatch:
    inputs:
      seed:
        type: boolean
        description: "Run data seeding after migrations"
        default: true
  workflow_call:
    inputs:
      seed:
        description: "Run data seeding after migrations"
        required: false
        type: boolean
        default: true
    secrets:
      AZURE_CLIENT_ID:
        required: false
      AZURE_TENANT_ID:
        required: false
      AZURE_SUBSCRIPTION_ID:
        required: false
      BUSBUDDY_CONNECTION:
        required: false
      AZURE_SQL_SERVER:
        required: false
      AZURE_SQL_USER:
        required: false
      AZURE_SQL_PASSWORD:
        required: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  migrate-and-seed:
    name: Apply EF Migrations and Seed
    runs-on: windows-latest
    timeout-minutes: 20
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      BUSBUDDY_CONNECTION: ${{ secrets.BUSBUDDY_CONNECTION }}
      AZURE_SQL_SERVER: ${{ secrets.AZURE_SQL_SERVER }}
      AZURE_SQL_USER: ${{ secrets.AZURE_SQL_USER }}
      AZURE_SQL_PASSWORD: ${{ secrets.AZURE_SQL_PASSWORD }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üèóÔ∏è Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: üîê Azure login (optional)
        if: ${{ env.AZURE_CLIENT_ID != '' && env.AZURE_TENANT_ID != '' && env.AZURE_SUBSCRIPTION_ID != '' }}
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: üîì Allow runner IP on Azure SQL (optional)
        if: ${{ env.AZURE_SUBSCRIPTION_ID != '' }}
        shell: pwsh
        run: |
          $rule = "bb-${{ github.run_id }}-db"
          echo "Creating temporary SQL firewall rule: $rule"
          pwsh -File .\PowerShell\Networking\Enable-AzureSqlAccess.ps1 `
            -SubscriptionId "${{ env.AZURE_SUBSCRIPTION_ID }}" `
            -ResourceGroupName "BusBuddy-RG" `
            -SqlServerName "busbuddy-server-sm2" `
            -RuleName $rule
          echo "RULE_NAME=$rule" >> $env:GITHUB_ENV

      - name: üîß Set BUSBUDDY_CONNECTION
        if: ${{ env.BUSBUDDY_CONNECTION != '' }}
        shell: pwsh
        run: |
          echo "BUSBUDDY_CONNECTION=${{ env.BUSBUDDY_CONNECTION }}" >> $env:GITHUB_ENV

      - name: üìú Generate EF migration script (idempotent)
        shell: pwsh
        run: |
          dotnet tool install --global dotnet-ef --version 9.* 2>$null | Out-Null
          $env:PATH += ";$env:USERPROFILE\.dotnet\tools"
          dotnet ef migrations script --idempotent --output migration-script.sql --project BusBuddy.Core/BusBuddy.Core.csproj --startup-project BusBuddy.WPF/BusBuddy.WPF.csproj

      - name: üóÉÔ∏è Apply EF migrations
        shell: pwsh
        run: |
          if ('${{ env.AZURE_SQL_SERVER }}' -and '${{ env.AZURE_SQL_USER }}' -and '${{ env.AZURE_SQL_PASSWORD }}') {
            sqlcmd -S "${{ env.AZURE_SQL_SERVER }}" -d "BusBuddyDb" -U "${{ env.AZURE_SQL_USER }}" -P "${{ env.AZURE_SQL_PASSWORD }}" -i migration-script.sql
          } else {
            echo "No Azure SQL secrets present; skipping sqlcmd apply"
          }

      - name: üå± Seed database
        if: ${{ github.event.inputs.seed == 'true' }}
        shell: pwsh
        run: |
          dotnet run --project TestDataSeeding/TestDataSeeding.csproj -- --force

      - name: üßπ Cleanup firewall rule
        if: ${{ always() && env.AZURE_SUBSCRIPTION_ID != '' }}
        shell: pwsh
        run: |
          if ($env:RULE_NAME) {
            pwsh -File .\PowerShell\Networking\Disable-AzureSqlAccess.ps1 `
              -SubscriptionId "${{ env.AZURE_SUBSCRIPTION_ID }}" `
              -ResourceGroupName "BusBuddy-RG" `
              -SqlServerName "busbuddy-server-sm2" `
              -RuleName $env:RULE_NAME
          } else {
            echo "No RULE_NAME found; skipping firewall cleanup"
          }
