name: üóÑÔ∏è Database Migrations & Seeding

on:
  workflow_dispatch:
    inputs:
      seed:
        type: boolean
        description: "Run data seeding after migrations"
        default: true
  workflow_call:
    inputs:
      seed:
        description: "Run data seeding after migrations"
        required: false
        type: boolean
        default: true
    secrets:
      AZURE_CLIENT_ID:
        required: false
      AZURE_TENANT_ID:
        required: false
      AZURE_SUBSCRIPTION_ID:
        required: false
      BUSBUDDY_CONNECTION:
        required: false
      AZURE_SQL_SERVER:
        required: false
      AZURE_SQL_USER:
        required: false
      AZURE_SQL_PASSWORD:
        required: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  migrate-and-seed:
    name: Apply EF Migrations and Seed
    runs-on: windows-latest
    timeout-minutes: 20
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      BUSBUDDY_CONNECTION: ${{ secrets.BUSBUDDY_CONNECTION }}
      AZURE_SQL_SERVER: ${{ secrets.AZURE_SQL_SERVER }}
      AZURE_SQL_USER: ${{ secrets.AZURE_SQL_USER }}
      AZURE_SQL_PASSWORD: ${{ secrets.AZURE_SQL_PASSWORD }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: Install PowerShell 7.5.x
        uses: PSModule/install-powershell@v1
        with:
          Version: 7.5.1

      - name: Initialize BusBuddy PowerShell module (bb-*)
        shell: pwsh
        run: |
          $ok = & ./PowerShell/Profiles/Import-BusBuddyModule.ps1
          if (-not $ok) { throw 'Failed to import BusBuddy PowerShell module' }
          Get-Command bb-anti-regression -ErrorAction SilentlyContinue | Format-Table -Auto

      - name: üèóÔ∏è Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: üîê Azure login (optional)
        if: ${{ env.AZURE_CLIENT_ID != '' && env.AZURE_TENANT_ID != '' && env.AZURE_SUBSCRIPTION_ID != '' }}
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: üîì Allow runner IP on Azure SQL (optional)
        if: ${{ env.AZURE_SUBSCRIPTION_ID != '' }}
        shell: pwsh
        run: |
          $rule = "bb-${{ github.run_id }}-db"
          $outFile = 'azure-sql-allow.log'
          Write-Host "Creating temporary SQL firewall rule: $rule"
          $script = (Join-Path $PWD 'PowerShell' 'Networking' 'Enable-AzureSqlAccess.ps1')
          $args = @('-NoLogo','-NoProfile','-File', $script,
            '-SubscriptionId', "${{ env.AZURE_SUBSCRIPTION_ID }}",
            '-ResourceGroupName', 'BusBuddy-RG',
            '-SqlServerName', 'busbuddy-server-sm2',
            '-RuleName', $rule)
          $proc = Start-Process -FilePath pwsh -ArgumentList $args -RedirectStandardOutput $outFile -RedirectStandardError $outFile -NoNewWindow -Wait -PassThru
          if ($proc.ExitCode -ne 0) {
            Get-Content $outFile | Write-Host
            throw "Failed to create temporary SQL firewall rule (ExitCode=$($proc.ExitCode))"
          }
          echo "RULE_NAME=$rule" >> $env:GITHUB_ENV

      - name: üîß Set BUSBUDDY_CONNECTION
        if: ${{ env.BUSBUDDY_CONNECTION != '' }}
        shell: pwsh
        run: |
          echo "BUSBUDDY_CONNECTION=${{ env.BUSBUDDY_CONNECTION }}" >> $env:GITHUB_ENV

      - name: üìú Generate EF migration script (idempotent)
        shell: pwsh
        run: |
          dotnet tool install --global dotnet-ef --version 9.* 2>$null | Out-Null
          $env:PATH += ";$env:USERPROFILE\.dotnet\tools"
          dotnet ef migrations script --idempotent --output migration-script.sql --project BusBuddy.Core/BusBuddy.Core.csproj --startup-project BusBuddy.WPF/BusBuddy.WPF.csproj

      - name: ÔøΩÔ∏è Ensure sqlcmd is available (optional)
        id: ensure-sqlcmd
        if: ${{ env.AZURE_SQL_SERVER != '' && env.AZURE_SQL_USER != '' && env.AZURE_SQL_PASSWORD != '' }}
        shell: pwsh
        run: |
          $found = $false
          if (-not (Get-Command sqlcmd -ErrorAction SilentlyContinue)) {
            echo "sqlcmd not found ‚Äî attempting install via Chocolatey..."
            try {
              choco install sqlserver-cmdline-utils -y --no-progress | Out-Null
            } catch {
              echo "::warning::Failed to install sqlcmd via Chocolatey"
            }
          }
          if (Get-Command sqlcmd -ErrorAction SilentlyContinue) {
            $found = $true
            echo "sqlcmd available."
          } else {
            echo "::notice::sqlcmd not available; migration application will be skipped"
          }
          echo "found=$found" >> $env:GITHUB_OUTPUT

      - name: ÔøΩüóÉÔ∏è Apply EF migrations
        if: ${{ steps.ensure-sqlcmd.outputs.found == 'True' }}
        shell: pwsh
        run: |
          if ('${{ env.AZURE_SQL_SERVER }}' -and '${{ env.AZURE_SQL_USER }}' -and '${{ env.AZURE_SQL_PASSWORD }}') {
            sqlcmd -S "${{ env.AZURE_SQL_SERVER }}" -d "BusBuddyDb" -U "${{ env.AZURE_SQL_USER }}" -P "${{ env.AZURE_SQL_PASSWORD }}" -i migration-script.sql
          } else {
            echo "No Azure SQL secrets present; skipping sqlcmd apply"
          }

      - name: üß™ Validate database schema
        if: ${{ env.BUSBUDDY_CONNECTION != '' && steps.ensure-sqlcmd.outputs.found == 'True' }}
        shell: pwsh
        run: |
          echo "Validating database schema..."
          sqlcmd -S "${{ env.AZURE_SQL_SERVER }}" -d "BusBuddyDb" -U "${{ env.AZURE_SQL_USER }}" -P "${{ env.AZURE_SQL_PASSWORD }}" -Q "SELECT COUNT(*) FROM sys.tables WHERE name LIKE 'Schedule%';" -h -1 |
            ForEach-Object { if ($_ -eq "0") { Write-Error "No Schedule tables found in database" } else { Write-Host "Schema OK ‚Äî found $($_) Schedule tables." } }

      - name: üå± Seed database
        if: ${{ github.event.inputs.seed == 'true' }}
        shell: pwsh
        run: |
          dotnet run --project TestDataSeeding/TestDataSeeding.csproj -- --force

      - name: üßπ Cleanup firewall rule
        if: ${{ always() && env.AZURE_SUBSCRIPTION_ID != '' }}
        shell: pwsh
        run: |
          if ($env:RULE_NAME) {
            $outFile = 'azure-sql-disable.log'
            $script = (Join-Path $PWD 'PowerShell' 'Networking' 'Disable-AzureSqlAccess.ps1')
            $args = @('-NoLogo','-NoProfile','-File', $script,
              '-SubscriptionId', "${{ env.AZURE_SUBSCRIPTION_ID }}",
              '-ResourceGroupName', 'BusBuddy-RG',
              '-SqlServerName', 'busbuddy-server-sm2',
              '-RuleName', $env:RULE_NAME)
            $proc = Start-Process -FilePath pwsh -ArgumentList $args -RedirectStandardOutput $outFile -RedirectStandardError $outFile -NoNewWindow -Wait -PassThru
            if ($proc.ExitCode -ne 0) {
              Write-Warning "Failed to remove temporary SQL firewall rule (ExitCode=$($proc.ExitCode))"
              Get-Content $outFile | Write-Host
            }
          } else {
            echo "No RULE_NAME found; skipping firewall cleanup"
          }
